{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/ChartData.js","webpack:///./src/js/ChartDrawier.js","webpack:///./src/js/ChartTemplate.js","webpack:///./src/js/ChartController.js","webpack:///./src/js/Chart.js","webpack:///./src/js/Resources.js","webpack:///./src/js/script.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ChartData","[object Object]","data","this","settings","viewBoxWidth","nightMode","background","tooltipBackground","tooltipColor","tooltipLineColor","valueLineColor","textColor","startEndColor","mapNotVisibleBackground","dayMode","monthNames","weekdaysNames","mapSliderWidth","decimalsInThousandRounding","fontSize","currentMode","chartLineWidth","valueLineWidth","tooltipCircleLineWidth","tooltipOffsetFromCursor","tooltipLineWidth","tooltipCirclesRadius","chartHeight","minMapSpace","lines","totalValues","x","parseX","columns","totalStart","totalEnd","length","parseData","activeLinesCount","count","lineIndex","active","column","shift","id","color","coords","push","columnId","types","createLineCoords","names","colors","getCoordsFromColumns","filter","v","indexOf","sort","a","b","ChartDrawier","target","type","item","document","createElementNS","settingName","setAttributeNS","appendChild","prop","startValue","endValue","miliseconds","step","animate","timePassed","classList","contains","setAttribute","parseFloat","Number","toFixed","draw","duration","start","performance","now","requestAnimationFrame","time","ChartTemplate_ChartTemplate","appendTarget","body","drawier","layoutID","Math","floor","random","mainAppendTarget","querySelector","layoutContorls","elements","cache","chartTemplate","viewBoxHeight","chartAspectRatio","chartSizeCoeff","chartWrapper","clientWidth","currentColorScheme","startChartValue","startChartSlider","baseVal","startChartWidth","width","endChartValue","endChartSlider","endChartWidth","viewRangeWidth","clientHeight","mapAspectRatio","mapWrapper","layout","initLayout","buttonsWrapper","chart","initChart","map","initMap","setCurrentColorScheme","createElement","add","innerHTML","append","createSVGItem","class","viewRange","createMapViewRange","createSlider","startMapBackground","createMapBackground","endMapBackground","changeMapViewSize","buttons","lineID","button","style","borderColor","dataset","lineid","end","min","max","lineId","pathLine","yCoords","coordIndex","xCoord","xValueToCoord","yCoord","yValueToCoord","path","stroke","stroke-width","fill","dates","totalStartDate","totalEndDate","date","text","settingsText","y","font-size","dateValue","Date","getMonth","getDate","ceil","steps","yOld","undefined","oldMin","oldMax","numberFormat","currentY","getAttribute","targetY","viewBox","height","animateItem","values","clientY","tooltipPath","tooltipHTML","tooltipText","removeItems","getDay","chartValue","circleValue","bcrChart","getBoundingClientRect","bcrTooltip","bcrCurrentTooltipLine","chartY","top","left","texts","querySelectorAll","line","setTimeout","remove","minRangeWidth","maxOfStartPosition","minOfEndPosition","placeholder","removingClass","drawingID","action","checkToNotRemove","Array","isArray","reject","items","getElementsByClassName","removeItem","countToRemove","found","checkID","fixed","abs","ChartController_ChartController","view","displayedDates","displayedValues","controlsState","startClicked","endClicked","mapRangeClicked","chartMove","chartReverceMove","startPosition","endPosition","clickInitialPosition","minMapViewRange","main","currentStart","currentEnd","absoluteMinMax","slice","pop","range","round","getOOM","stepOfValues","chartValuesMinMax","getChartMinMaxValueInRange","getStartAbsoluteValue","getEndAbsoluteValue","countValuesToDisplay","stepNotRounded","clientX","chartCoeff","chartStart","chartFullWidth","chartIntervalWidth","cursorPositionInChart","cursorShift","percentCursorPositionInChart","startPercent","endPercent","order","log","LN10","pow","init","updateLines","drawValues","initControlButtons","setEventListeners","buttonsListeners","dragStartListeners","dragEndListeners","moveListeners","createLines","updateDates","updateValues","updateChartData","totalRange","totalDrawsCount","currentStepsClasses","createValues","offset","windowWidthDrawsCount","wrapperWidth","myltiple","log2","currentDatesClasses","createDates","event","getCoordIndexByClientX","touches","getCoordsByIndex","createTooltip","hasDataToDisplay","addNoDataPlaceholder","valueStart","changeStartPosition","valueEnd","changeEndPosition","addEventListener","opacity","clearConsrolState","moveChart","updateTooltip","Chart_Chart","settingValue","updateSettings","charts","switchLink","url","currentmode","switchTo","changeSetting","Promise","resolve","request","XMLHttpRequest","open","onload","status","JSON","parse","responseText","send","then","dataOfChart"],"mappings":"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","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class ChartData {\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.settings = {\r\n\r\n\t\t\t// width of viewBox\r\n\t\t\tviewBoxWidth: 100,\r\n\r\n\t\t\tnightMode: {\r\n\r\n\t\t\t\t// background of all chart\r\n\t\t\t\tbackground: '#242f3e',\r\n\r\n\t\t\t\t// background of tooltip\r\n\t\t\t\ttooltipBackground: '#253241',\r\n\r\n\t\t\t\t// color of tooltip\r\n\t\t\t\ttooltipColor: '#ffffff',\r\n\r\n\t\t\t\t// line of selected date color\r\n\t\t\t\ttooltipLineColor: '#3b4a5a',\r\n\r\n\t\t\t\t// color of value lines\r\n\t\t\t\tvalueLineColor: '#293544',\r\n\r\n\t\t\t\t// dates and values on X and Y axis color\r\n\t\t\t\ttextColor: '#546778',\r\n\r\n\t\t\t\t// color of dragging blocks (start and end on map)\r\n\t\t\t\tstartEndColor: 'rgba(112, 149, 185, 0.5)',\r\n\r\n\t\t\t\t// color on map of hiden chart elements\r\n\t\t\t\tmapNotVisibleBackground: 'rgba(16, 25, 37, 0.5)',\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdayMode: {\r\n\r\n\t\t\t\t// background of all chart\r\n\t\t\t\tbackground: '#ffffff',\r\n\r\n\t\t\t\t// background of tooltip\r\n\t\t\t\ttooltipBackground: '#ffffff',\r\n\r\n\t\t\t\t// color of tooltip\r\n\t\t\t\ttooltipColor: '#222222',\r\n\r\n\t\t\t\t// line of selected date color\r\n\t\t\t\ttooltipLineColor: '#dfe6eb',\r\n\r\n\t\t\t\t// color of value lines\r\n\t\t\t\tvalueLineColor: '#f2f4f5',\r\n\r\n\t\t\t\t// dates and values on X and Y axis color\r\n\t\t\t\ttextColor: '#96a2aa',\r\n\r\n\t\t\t\t// color of dragging blocks (start and end on map)\r\n\t\t\t\tstartEndColor: 'rgba(183, 207, 223, 0.5)',\r\n\r\n\t\t\t\t// color on map of hiden chart elements\r\n\t\t\t\tmapNotVisibleBackground: 'rgba(221, 234, 241, 0.5)',\r\n\r\n\t\t\t},\r\n\r\n\t\t\tmonthNames: [\r\n\t\t\t\t\"Dec\", \"Jan\", \"Feb\", \"Mar\",\r\n\t\t\t\t\"Apr\", \"May\", \"Jun\", \"Jul\",\r\n\t\t\t\t\"Aug\", \"Sep\", \"Oct\",\r\n\t\t\t\t\"Nov\"\r\n\t\t\t],\r\n\r\n\t\t\tweekdaysNames: [\r\n\t\t\t\t\"Sun\", \"Mon\",\r\n\t\t\t\t\"Tue\", \"Wed\",\r\n\t\t\t\t\"Thu\", \"Fri\",\r\n\t\t\t\t\"Sat\"\r\n\t\t\t],\r\n\r\n\t\t\t// width of sliders on map (in percents)\r\n\t\t\tmapSliderWidth: 0.03,\r\n\r\n\t\t\tdecimalsInThousandRounding: 2,\r\n\r\n\t\t\tfontSize: 13,\r\n\r\n\t\t\tcurrentMode: 'day',\r\n\r\n\t\t\tchartLineWidth: 3,\r\n\r\n\t\t\tvalueLineWidth: 1,\r\n\r\n\t\t\ttooltipCircleLineWidth: 2,\r\n\r\n\t\t\ttooltipOffsetFromCursor: 15,\r\n\r\n\t\t\ttooltipLineWidth: 2,\r\n\r\n\t\t\ttooltipCirclesRadius: 5,\r\n\r\n\t\t\t// height relative to the wrapper (in percent)\r\n\t\t\tchartHeight: 0.93,\r\n\r\n\t\t\t// minimal space between start and end\r\n\t\t\tminMapSpace: 15,\r\n\t\t}\r\n\r\n\t\tthis.lines = {};\r\n\r\n\t\tthis.totalValues = [];\r\n\r\n\t\tthis.x = this.parseX(data.columns);\r\n\r\n\t\tthis.totalStart = this.x[0];\r\n\r\n\t\tthis.totalEnd = this.x[this.x.length - 1];\r\n\r\n\t\tthis.parseData(data);\r\n\r\n\t}\r\n\r\n\tget activeLinesCount(){\r\n\r\n\t\tlet count = 0;\r\n\r\n\t\tfor (let lineIndex in this.lines){\r\n\t\t\tcount += this.lines[lineIndex].active ? 1 : 0;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tparseX(columns) {\r\n\t\tfor (let column of columns){\r\n\t\t\tif (column[0] === 'x'){\r\n\t\t\t\tcolumn.shift();\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tcreateLineCoords({id, name, color, coords}){\r\n\t\tthis.lines[`${id}`] = {\r\n\t\t\tname,\r\n\t\t\tcoords,\r\n\t\t\tcolor,\r\n\t\t\tactive: true\r\n\t\t}\r\n\t}\r\n\r\n\tgetCoordsFromColumns({key, columns}){\r\n\r\n\t\tfor(let column of columns){\r\n\r\n\t\t\tif (column[0] === key){\r\n\t\t\t\tcolumn.shift();\r\n\r\n\t\t\t\tthis.totalValues.push(...column);\r\n\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tparseData(data){\r\n\r\n\t\tfor (let columnId in data.types){\r\n\t\t\tif (data.types[columnId] === 'line'){\r\n\t\t\t\tthis.createLineCoords({\r\n\t\t\t\t\tid: columnId,\r\n\t\t\t\t\tname: data.names[columnId],\r\n\t\t\t\t\tcolor: data.colors[columnId],\r\n\t\t\t\t\tcoords: this.getCoordsFromColumns({key: columnId, columns: data.columns})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// remove all not unique values\r\n\t\tthis.totalValues = this.totalValues.filter((v, i, s) => s.indexOf(v) === i);\r\n\r\n\t\tthis.totalValues.sort((a, b) => {return a - b});\r\n\r\n\t}\r\n\r\n}","export default class ChartDrawier {\r\n\r\n\tconstructor(){\r\n\r\n\t}\r\n\r\n\tcreateSVGItem(target, type, settings){\r\n\r\n\t\tconst item = document.createElementNS('http://www.w3.org/2000/svg', type);\r\n\r\n\t\tfor (const settingName in settings){\r\n\t\t\titem.setAttributeNS(null, settingName, settings[settingName]);\r\n\t\t}\r\n\r\n\t\ttarget.appendChild(item);\r\n\r\n\t\treturn item;\r\n\r\n\t}\r\n\r\n\tanimateItem(item, prop, startValue, endValue, miliseconds){\r\n\t\tconst step = endValue - startValue;\r\n\t\tthis.animate(function(timePassed) {\r\n\r\n\t\t\tif (item.classList.contains('active-item')){\r\n\r\n\t\t\t\tconst animationProgress = timePassed / miliseconds;\r\n\r\n\t\t\t\tconst value = (startValue + step * animationProgress);\r\n\r\n\t\t\t\titem.setAttribute(prop, parseFloat(Number(value).toFixed(9)));\r\n\r\n\t\t\t}\r\n\t\t}, miliseconds);\r\n\r\n\t}\r\n\r\n\tanimate(draw, duration) {\r\n\t\tvar start = performance.now();\r\n\t\trequestAnimationFrame(function animate(time) {\r\n\r\n\t\t\tvar timePassed = time - start;\r\n\r\n\t\t\tif (timePassed > duration) timePassed = duration;\r\n\r\n\t\t\tdraw(timePassed);\r\n\r\n\t\t\tif (timePassed < duration) {\r\n\r\n\t\t\t\trequestAnimationFrame(animate);\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n}\r\n\r\n","import ChartDrawier from './ChartDrawier';\r\n\r\nexport default class ChartTemplate {\r\n\r\n\tconstructor({appendTarget = body, settings}){\r\n\r\n\t\tthis.drawier = new ChartDrawier();\r\n\r\n\t\tthis.layoutID = `chart-layout-${Math.floor(Math.random() * 100000)}`;\r\n\r\n\t\tthis.mainAppendTarget = document.querySelector(appendTarget);\r\n\r\n\t\tthis.layoutContorls = {};\r\n\r\n\t\tthis.settings = settings;\r\n\r\n\t\t// define chart elements (like wrapper, window, map, etc...)\r\n\t\tthis.elements = {};\r\n\r\n\t\tthis.cache = {};\r\n\r\n\t}\r\n\r\n\tget chartTemplate(){\r\n\t\treturn `\r\n\t\t\t<div class=\"chart\" id=\"${this.layoutID}\">\r\n\t\t\t\t<div class=\"chart__window\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__map\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__buttons\"></div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tget viewBoxWidth(){\r\n\t\treturn this.settings.viewBoxWidth;\r\n\t}\r\n\r\n\tget viewBoxHeight(){\r\n\t\treturn this.settings.viewBoxWidth / this.chartAspectRatio;\r\n\t}\r\n\r\n\tget chartSizeCoeff(){\r\n\t\treturn this.viewBoxWidth / this.elements.chartWrapper.clientWidth;\r\n\t}\r\n\r\n\tget currentColorScheme(){\r\n\t\tconst mode = this.settings.currentMode;\r\n\t\treturn this.settings[`${mode}Mode`];\r\n\t}\r\n\r\n\tget mapSliderWidth() {\r\n\t\treturn this.settings.mapSliderWidth;\r\n\t}\r\n\r\n\tget startChartValue(){\r\n\t\treturn this.layoutContorls.startChartSlider.x.baseVal.value;\r\n\t}\r\n\tset startChartValue(value){\r\n\t\tthis.layoutContorls.startChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget startChartWidth(){\r\n\t\treturn this.layoutContorls.startChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\tget endChartValue(){\r\n\t\treturn this.layoutContorls.endChartSlider.x.baseVal.value;\r\n\t}\r\n\tset endChartValue(value){\r\n\t\tthis.layoutContorls.endChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget endChartWidth(){\r\n\t\treturn this.layoutContorls.endChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\tget viewRangeWidth(){\r\n\t\treturn this.endChartValue - this.startChartValue;\r\n\t}\r\n\r\n\tget chartAspectRatio(){\r\n\t\treturn this.elements.chartWrapper.clientWidth / this.elements.chartWrapper.clientHeight;\r\n\t}\r\n\r\n\tget mapAspectRatio(){\r\n\t\treturn this.elements.mapWrapper.clientWidth / this.elements.mapWrapper.clientHeight;\r\n\t}\r\n\r\n\t// init all chart template\r\n\tinit(){\r\n\r\n\t\tthis.elements.layout = this.initLayout();\r\n\r\n\t\tthis.elements.chartWrapper = this.elements.layout.querySelector('.chart__window');\r\n\r\n\t\tthis.elements.mapWrapper = this.elements.layout.querySelector('.chart__map');\r\n\r\n\t\tthis.elements.buttonsWrapper = this.elements.layout.querySelector('.chart__buttons');\r\n\r\n\t\tthis.elements.chart = this.initChart();\r\n\r\n\t\tthis.elements.map = this.initMap();\r\n\r\n\t\tthis.setCurrentColorScheme();\r\n\r\n\t}\r\n\r\n\tinitLayout(){\r\n\r\n\t\tconst layout = document.createElement('div');\r\n\r\n\t\tlayout.classList.add('chart_wrapper');\r\n\r\n\t\tlayout.innerHTML = this.chartTemplate;\r\n\r\n\t\tthis.mainAppendTarget.append(layout);\r\n\r\n\t\treturn layout;\r\n\r\n\t}\r\n\r\n\tinitChart(){\r\n\r\n\t\tconst chart = this.elements.chartWrapper.querySelector('svg');\r\n\r\n\t\tchart.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth / this.chartAspectRatio}`);\r\n\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'value-lines-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'chart-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'tooltip-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'dates-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'values-wrapper'});\r\n\r\n\t\treturn chart;\r\n\r\n\t}\r\n\r\n\tinitMap(){\r\n\r\n\t\tconst map = this.elements.mapWrapper.querySelector('svg');\r\n\r\n\t\tmap.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth / this.mapAspectRatio}`);\r\n\r\n\t\tthis.drawier.createSVGItem(map, 'g', {class: 'chart-wrapper'});\r\n\r\n\t\tthis.layoutContorls.viewRange = this.createMapViewRange(map);\r\n\r\n\t\t// init start slider\r\n\t\tthis.layoutContorls.startChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.startChartSlider.setAttributeNS(null, 'x', 0);\r\n\r\n\t\t// init start map background\r\n\t\tthis.layoutContorls.startMapBackground = this.createMapBackground(map);\r\n\t\tthis.layoutContorls.startMapBackground.setAttributeNS(null, 'x', 0);\r\n\r\n\t\t// init end slider\r\n\t\tthis.layoutContorls.endChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.endChartSlider.setAttributeNS(null, 'x', this.viewBoxWidth - this.endChartWidth);\r\n\r\n\t\t// init start map background\r\n\t\tthis.layoutContorls.endMapBackground = this.createMapBackground(map);\r\n\t\tthis.layoutContorls.endMapBackground.setAttributeNS(null, 'x', this.viewBoxWidth);\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\tinitControlButtons(lines){\r\n\r\n\t\tconst buttons = [];\r\n\r\n\t\tfor (let lineID in lines){\r\n\r\n\t\t\tconst button = document.createElement('button');\r\n\r\n\t\t\tbutton.setAttribute('class', 'chart-control-button active');\r\n\r\n\t\t\tbutton.style.color = this.currentColorScheme.tooltipColor;\r\n\r\n\t\t\tbutton.style.borderColor = this.currentColorScheme.tooltipLineColor;\r\n\r\n\t\t\tbutton.innerHTML = `<span style=\"border-color:${lines[lineID].color}\"><div class=\"background\" style=\"background: ${lines[lineID].color}\"></div><i>✔</i></span> ${lines[lineID].name}`;\r\n\r\n\t\t\tbutton.dataset.lineid = lineID;\r\n\r\n\t\t\tthis.elements.buttonsWrapper.appendChild(button);\r\n\r\n\t\t\tbuttons.push(button);\r\n\r\n\t\t}\r\n\r\n\t\tthis.elements.buttons = buttons;\r\n\r\n\t}\r\n\r\n\tcreateLines({target, x, lines, start, end, min, max}){\r\n\r\n\t\tfor (let lineId in lines){\r\n\r\n\t\t\tlet pathLine = '';\r\n\r\n\t\t\tconst yCoords = lines[lineId].coords;\r\n\r\n\t\t\tfor (let coordIndex in x){\r\n\r\n\t\t\t\tcoordIndex = Number(coordIndex);\r\n\r\n\t\t\t\tconst xCoord = this.xValueToCoord(x[coordIndex], start, end);\r\n\t\t\t\tconst yCoord = this.yValueToCoord(yCoords[coordIndex], min, max, target);\r\n\r\n\t\t\t\tpathLine += (coordIndex === 0) ? `M${xCoord} ${yCoord}` : ` L ${xCoord} ${yCoord}`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet path = target.querySelector(`.line-${lineId}`);\r\n\r\n\t\t\tif (path === null){\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'class': `line-${lineId}`,\r\n\t\t\t\t\t'stroke': lines[lineId].color,\r\n\t\t\t\t\t'stroke-width': this.chartSizeCoeff * this.settings.chartLineWidth,\r\n\t\t\t\t\t'fill': 'none'\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create the chart path if it not exists\r\n\t\t\t\tpath = this.drawier.createSVGItem(target.querySelector('.chart-wrapper'), 'path', settings);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpath.setAttributeNS(null, 'd', pathLine);\r\n\t\t}\r\n\t}\r\n\r\n\tcreateDates({target, dates, start, end, totalStartDate, totalEndDate}){\r\n\r\n\t\tfor (const date of dates){\r\n\r\n\t\t\tlet x = this.xValueToCoord(date, start, end);\r\n\r\n\t\t\tlet text = target.querySelector(`.date-${date}`);\r\n\r\n\t\t\tif (text === null){\r\n\r\n\t\t\t\tconst settingsText = {\r\n\t\t\t\t\t'y': this.viewBoxHeight - this.viewBoxHeight * 0.05,\r\n\t\t\t\t\t'font-size': this.chartSizeCoeff * this.settings.fontSize,\r\n\t\t\t\t\t'class': `date-text date-${date} removing-item`,\r\n\t\t\t\t\t'color': this.currentColorScheme.textColor,\r\n\t\t\t\t\t'fill': this.currentColorScheme.textColor\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttext = this.drawier.createSVGItem(target.querySelector('.dates-wrapper'), 'text', settingsText);\r\n\r\n\t\t\t\tconst dateValue = new Date(date);\r\n\t\t\t\ttext.innerHTML = `${this.settings.monthNames[dateValue.getMonth()]} ${dateValue.getDate()}`;\r\n\t\t\t\ttext.setAttribute('y', this.viewBoxHeight);\r\n\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\ttext.setAttribute('x', 0);\r\n\t\t\t\tif (date === totalStartDate){\r\n\t\t\t\t\tx += Math.ceil(text.clientWidth * 0.1);;\r\n\t\t\t\t}else if (date === totalEndDate){\r\n\t\t\t\t\tx -= Math.ceil(text.clientWidth * 1.1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tx -= Math.floor(text.clientWidth / 2);\r\n\t\t\t\t}\r\n\t\t\ttext.setAttribute('x', x);\r\n\t\t\ttext.setAttributeNS(null, 'class', `date-${date} date-text active-item`);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcreateValues({target, steps, min, max}){\r\n\r\n\t\tfor (const value of steps){\r\n\r\n\t\t\tlet yOld;\r\n\r\n\t\t\tconst y = this.yValueToCoord(value, min, max, target);\r\n\r\n\t\t\tif (this.cache.oldMin !== undefined){\r\n\t\t\t\tyOld = this.yValueToCoord(value, this.cache.oldMin, this.cache.oldMax, target);\r\n\t\t\t}else{\r\n\t\t\t\tyOld = y;\r\n\t\t\t}\r\n\r\n\t\t\tlet text = target.querySelector(`.value-${value}-text`);\r\n\r\n\t\t\tlet path = target.querySelector(`.value-${value}-value`);\r\n\r\n\t\t\tif (path === null){\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'stroke': this.currentColorScheme.valueLineColor,\r\n\t\t\t\t\t'stroke-width': this.chartSizeCoeff * this.settings.valueLineWidth,\r\n\t\t\t\t\t'fill': 'none',\r\n\t\t\t\t\t'class': 'removing-item',\r\n\t\t\t\t\t'd': `M${0} ${yOld} L ${this.viewBoxWidth} ${yOld}`\r\n\t\t\t\t};\r\n\t\t\t\tpath = this.drawier.createSVGItem(target.querySelector('.value-lines-wrapper'), 'path', settings);\r\n\t\t\t}\r\n\r\n\t\t\tpath.setAttribute('class', `value-item active-item value-${value} value-${value}-value`);\r\n\t\t\tpath.setAttributeNS(null, 'd', `M${0} ${y} L ${this.viewBoxWidth} ${y}`);\r\n\r\n\t\t\tif (text === null){\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'x': 0,\r\n\t\t\t\t\t'font-size': this.chartSizeCoeff * this.settings.fontSize,\r\n\t\t\t\t\t'color': this.currentColorScheme.textColor,\r\n\t\t\t\t\t'fill': this.currentColorScheme.textColor,\r\n\t\t\t\t\t'class': 'removing-item',\r\n\t\t\t\t\t'y': yOld\r\n\t\t\t\t};\r\n\t\t\t\ttext = this.drawier.createSVGItem(target.querySelector('.values-wrapper'), 'text', settings);\r\n\t\t\t}\r\n\r\n\t\t\ttext.dataset.y = value;\r\n\r\n\t\t\tpath.dataset.y = value;\r\n\r\n\t\t\ttext.innerHTML = this.numberFormat(value);\r\n\r\n\t\t\ttext.setAttribute('class', `value-item active-item value-${value} value-${value}-text`);\r\n\r\n\t\t\tlet currentY = Number(text.getAttribute('y'));\r\n\r\n\t\t\tconst targetY = y - target.viewBox.baseVal.height * 0.01;\r\n\r\n\t\t\tif (currentY !== null){\r\n\t\t\t\tif (currentY !== targetY){\r\n\t\t\t\t\tlet time = 400;\r\n\t\t\t\t\tif (target.classList.contains('dragging')){\r\n\t\t\t\t\t\ttime = 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drawier.animateItem(text, 'y', currentY, targetY, time);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttext.setAttribute('y', targetY);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\ttext.setAttribute('y', targetY);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.cache.oldMin = min;\r\n\t\tthis.cache.oldMax = max;\r\n\t}\r\n\r\n\tcreateTooltip({x, values, clientY, start, end, min, max}){\r\n\r\n\t\tconst target = this.elements.chartWrapper;\r\n\r\n\t\tconst xCoord = this.xValueToCoord(x, start, end);\r\n\r\n\t\tlet tooltipPath = target.querySelector(`.tooltip-${x}`);\r\n\r\n\t\tlet tooltipHTML = ``;\r\n\r\n\t\tlet tooltipText = document.querySelector(`#tooltip-text-${x}`);\r\n\r\n\t\tif (tooltipPath === null){\r\n\r\n\t\t\tthis.removeItems('tooltip-item', `tooltip-${x}`);\r\n\r\n\t\t\tconst dateValue = new Date(x);\r\n\r\n\t\t\tconst settings = {\r\n\t\t\t\t'stroke': this.currentColorScheme.tooltipLineColor,\r\n\t\t\t\t'stroke-width': this.chartSizeCoeff * this.settings.tooltipLineWidth,\r\n\t\t\t\t'fill': 'none',\r\n\t\t\t\t'class': `tooltip-${x} tooltip-item`,\r\n\t\t\t\t'd': `M${xCoord} 0 L ${xCoord} ${this.viewBoxHeight}`,\r\n\t\t\t}\r\n\t\t\ttooltipPath = this.drawier.createSVGItem(target.querySelector('.tooltip-wrapper'), 'path', settings);\r\n\r\n\t\t\ttooltipHTML += `<span class=\"tooltip-date\">${this.settings.weekdaysNames[dateValue.getDay()]}, ${this.settings.monthNames[dateValue.getMonth()]} ${dateValue.getDate()}</span>`;\r\n\t\t\ttooltipHTML += `<div class=\"tooltip-values-wrapper\">`;\r\n\r\n\t\t\tfor (const chartValue of values){\r\n\r\n\t\t\t\tlet circleValue = target.querySelector(`.tooltip-value-${chartValue.y}`);\r\n\r\n\t\t\t\tconst yCoord = this.yValueToCoord(chartValue.y, min, max, target);\r\n\r\n\t\t\t\tif (circleValue === null){\r\n\r\n\t\t\t\t\tconst settings = {\r\n\t\t\t\t\t\t'stroke'      : chartValue.color,\r\n\t\t\t\t\t\t'stroke-width': this.chartSizeCoeff * this.settings.tooltipCircleLineWidth,\r\n\t\t\t\t\t\t'fill'        : this.currentColorScheme.background,\r\n\t\t\t\t\t\t'r'           : this.chartSizeCoeff * this.settings.tooltipCirclesRadius,\r\n\t\t\t\t\t\t'class'       : `tooltip-${x} tooltip-value-${chartValue.y} tooltip-item`\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcircleValue = this.drawier.createSVGItem(target.querySelector('.tooltip-wrapper'), 'circle', settings);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cx', xCoord);\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cy', yCoord);\r\n\r\n\r\n\t\t\t\ttooltipHTML += `<div class=\"tooltip-value-wrapper\" style=\"color: ${chartValue.color}\">\r\n\t\t\t\t\t<span class=\"tooltip-value\">${this.numberFormat([chartValue.y])}</span>\r\n\t\t\t\t\t<span class=\"tooltip-value-name\">${chartValue.name}</span>\r\n\t\t\t\t</div>`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttooltipHTML += `</div>`;\r\n\r\n\r\n\r\n\t\t\tif (tooltipText === null){\r\n\t\t\t\ttooltipText = document.createElement('div');\r\n\t\t\t\ttooltipText.setAttribute('class', `tooltip-text tooltip-${x} tooltip-item`);\r\n\t\t\t\ttooltipText.setAttribute('id', `tooltip-text-${x}`);\r\n\t\t\t\tthis.elements.chartWrapper.appendChild(tooltipText);\r\n\t\t\t}\r\n\r\n\t\t\ttooltipText.innerHTML = tooltipHTML;\r\n\t\t\ttooltipText.style.background = this.currentColorScheme.tooltipBackground;\r\n\t\t\ttooltipText.style.color = this.currentColorScheme.tooltipColor;\r\n\r\n\t\t}\r\n\r\n\t\t// rect of chart\r\n\t\tconst bcrChart = this.elements.chart.getBoundingClientRect();\r\n\r\n\t\t// rect of tooltip (text)\r\n\t\tconst bcrTooltip = tooltipText.getBoundingClientRect();\r\n\r\n\t\t// rect of tooltip (line)\r\n\t\tconst bcrCurrentTooltipLine = tooltipPath.getBoundingClientRect();\r\n\r\n\t\t// get relative Y position of cursor\r\n\t\tconst chartY = clientY - bcrChart.top;\r\n\r\n\t\t// tooltip on top from cursor by offset\r\n\t\tlet left = ((bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width / 2));\r\n\t\tlet top = chartY - (bcrTooltip.height + this.settings.tooltipOffsetFromCursor);\r\n\r\n\t\t// tooltip on right from cursor by offset\r\n\t\tif (left < 0){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) + this.settings.tooltipOffsetFromCursor;\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\r\n\t\t}\r\n\r\n\t\t// tooltip on left from cursor by offset\r\n\t\tif ((left + bcrTooltip.width) > bcrChart.width){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width + this.settings.tooltipOffsetFromCursor);\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\t\t}\r\n\r\n\t\t// tooltip on bottom from cursor by offset\r\n\t\tif (top < 0){\r\n\t\t\ttop = chartY + this.settings.tooltipOffsetFromCursor;\r\n\t\t}\r\n\r\n\r\n\t\t// tooltip on top (right/left) from cursor by offset\r\n\t\tif ((top + bcrTooltip.height) > (bcrChart.height - (bcrChart.height * (1 - this.settings.chartHeight)))){\r\n\t\t\ttop = chartY - (bcrTooltip.height + this.settings.tooltipOffsetFromCursor);\r\n\t\t}\r\n\r\n\r\n\t\ttooltipText.style.top = `${top}px`;\r\n\t\ttooltipText.style.left = `${left}px`;\r\n\t}\r\n\r\n\r\n\tcreateSlider(target){\r\n\r\n\t\tconst settings = {\r\n\t\t\t'y'     : 0,\r\n\t\t\t'width' : target.viewBox.baseVal.width * this.mapSliderWidth,\r\n\t\t\t'height': target.viewBox.baseVal.height,\r\n\t\t\t'fill'  : 'rgba(0,0,0,0)'\r\n\t\t};\r\n\r\n\t\tconst chartSlider = this.drawier.createSVGItem(target, 'rect', settings);\r\n\r\n\t\treturn chartSlider;\r\n\t}\r\n\r\n\tcreateMapBackground(target){\r\n\t\tconst settings = {\r\n\t\t\t'y'     : 0,\r\n\t\t\t'width' : 0,\r\n\t\t\t'height': target.viewBox.baseVal.height,\r\n\t\t\t'fill'  : this.currentColorScheme.mapNotVisibleBackground\r\n\t\t};\r\n\r\n\t\tconst mapBackground = this.drawier.createSVGItem(target, 'rect', settings);\r\n\r\n\t\treturn mapBackground;\r\n\t}\r\n\r\n\tcreateMapViewRange(target){\r\n\r\n\t\tconst settings = {\r\n\t\t\t'x'           : 0,\r\n\t\t\t'y'           : 0 - target.viewBox.baseVal.height * this.mapSliderWidth,\r\n\t\t\t'width'       : 0,\r\n\t\t\t'height'      : target.viewBox.baseVal.height + target.viewBox.baseVal.height * (this.mapSliderWidth * 2),\r\n\t\t\t'fill'        : 'rgba(0,0,0,0)',\r\n\t\t\t'stroke'      : this.currentColorScheme.startEndColor,\r\n\t\t\t'stroke-width': this.viewBoxWidth * this.mapSliderWidth\r\n\t\t};\r\n\r\n\t\tconst viewRange = this.drawier.createSVGItem(target, 'rect', settings);\r\n\r\n\t\treturn viewRange;\r\n\t}\r\n\r\n\tsetCurrentColorScheme(){\r\n\r\n\t\tthis.elements.layout.classList.add('scheme-change');\r\n\r\n\t\tdocument.querySelector('body').style.background = this.currentColorScheme.background;\r\n\r\n\t\tthis.elements.map.style.background = this.currentColorScheme.background;\r\n\r\n\t\tthis.elements.chart.style.background = this.currentColorScheme.background;\r\n\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'stroke', this.currentColorScheme.startEndColor);\r\n\r\n\t\tthis.layoutContorls.endMapBackground.setAttributeNS(null, 'fill', this.currentColorScheme.mapNotVisibleBackground);\r\n\r\n\t\tthis.layoutContorls.startMapBackground.setAttributeNS(null, 'fill', this.currentColorScheme.mapNotVisibleBackground);\r\n\r\n\t\tif (this.elements.buttons){\r\n\t\t\tfor (const button of this.elements.buttons){\r\n\t\t\t\tbutton.style.color = this.currentColorScheme.tooltipColor;\r\n\t\t\t\tbutton.style.borderColor = this.currentColorScheme.tooltipLineColor;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tconst texts = [...this.elements.layout.querySelector('.dates-wrapper').querySelectorAll('text'), ...this.elements.layout.querySelector('.values-wrapper').querySelectorAll('text')];\r\n\r\n\t\tfor (const text of texts){\r\n\t\t\ttext.setAttributeNS(null, 'color', this.currentColorScheme.textColor);\r\n\t\t\ttext.setAttributeNS(null, 'fill', this.currentColorScheme.textColor);\r\n\t\t}\r\n\r\n\t\tconst lines = this.elements.layout.querySelector('.value-lines-wrapper').querySelectorAll('path');\r\n\r\n\t\tfor (const line of lines){\r\n\t\t\tline.setAttributeNS(null, 'stroke', this.currentColorScheme.valueLineColor);\r\n\t\t}\r\n\r\n\t\tsetTimeout(() => this.elements.layout.classList.remove('scheme-change'), 0);\r\n\r\n\t}\r\n\r\n\tchangeStartPosition(value, minRangeWidth){\r\n\r\n\t\tconst maxOfStartPosition = this.endChartValue + this.endChartWidth - minRangeWidth;\r\n\r\n\t\tvalue = value > 0 ? value : 0;\r\n\r\n\t\tvalue = value < maxOfStartPosition ? value : maxOfStartPosition;\r\n\r\n\t\tthis.startChartValue = value;\r\n\r\n\t\tthis.layoutContorls.startMapBackground.setAttributeNS(null, 'width', this.startChartValue);\r\n\r\n\t\tthis.changeMapViewSize();\r\n\t}\r\n\r\n\r\n\r\n\tchangeEndPosition(value, minRangeWidth){\r\n\r\n\t\tconst minOfEndPosition = this.startChartValue + minRangeWidth - this.endChartWidth;\r\n\r\n\t\tvalue = value > minOfEndPosition ? value : minOfEndPosition;\r\n\r\n\t\tvalue = value + this.endChartWidth < this.viewBoxWidth ? value : this.viewBoxWidth - this.endChartWidth;\r\n\r\n\t\tthis.endChartValue = value;\r\n\r\n\t\tthis.layoutContorls.endMapBackground.setAttributeNS(null, 'width', this.viewBoxWidth - this.endChartValue + this.endChartWidth);\r\n\t\tthis.layoutContorls.endMapBackground.setAttributeNS(null, 'x', this.endChartValue + this.endChartWidth);\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t}\r\n\r\n\r\n\tchangeMapViewSize(){\r\n\r\n\t\tconst left = this.startChartValue + (this.viewBoxWidth * (this.mapSliderWidth / 2));\r\n\r\n\t\tconst width = this.viewRangeWidth;\r\n\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'x', left);\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'width', width);\r\n\r\n\t}\r\n\r\n\r\n\taddNoDataPlaceholder(){\r\n\t\tlet placeholder = this.elements.layout.querySelector('.no-data-placeholder');\r\n\t\tif (placeholder === null){\r\n\t\t\tplaceholder = document.createElement('div');\r\n\t\t\tplaceholder.setAttribute('class', 'no-data-placeholder');\r\n\t\t\tplaceholder.innerHTML = '<h2>No data to display!</h2>';\r\n\t\t\tplaceholder.style.color = this.currentColorScheme.textColor;\r\n\t\t\tthis.elements.layout.querySelector('.chart__window').appendChild(placeholder);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveItems(removingClass, drawingID = 'id-of-item-to-not-remove', action = 'remove', settings = {}){\r\n\r\n\t\tlet checkToNotRemove = [];\r\n\r\n\t\tif (typeof drawingID === 'string'){\r\n\t\t\tcheckToNotRemove.push(drawingID);\r\n\t\t}else if(Array.isArray(drawingID)){\r\n\t\t\tcheckToNotRemove = drawingID;\r\n\t\t}else{\r\n\t\t\treject('Wrong value of Drawing ID');\r\n\t\t}\r\n\r\n\t\tlet items = this.elements.layout.getElementsByClassName(removingClass);\r\n\r\n\t\tif (this.removeItem(items, checkToNotRemove, items.length, action, settings)){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tremoveItem(items, checkToNotRemove, countToRemove, action, settings = {}){\r\n\t\tfor (const item of items){\r\n\t\t\tlet found = 0;\r\n\t\t\tfor (const checkID of checkToNotRemove){\r\n\t\t\t\tfound += item.classList.contains(checkID) ? 1 : 0;\r\n\t\t\t}\r\n\t\t\tif (found === 0){\r\n\t\t\t\tswitch (action){\r\n\t\t\t\t\tcase 'remove':\r\n\t\t\t\t\t\titem.remove();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'hide':\r\n\t\t\t\t\t\titem.classList.remove('active-item');\r\n\t\t\t\t\t\titem.classList.add('removing-item');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'hideByY':\r\n\t\t\t\t\t\tconst y = this.yValueToCoord(Number(item.dataset.y), settings.min, settings.max, this.elements.chart);\r\n\t\t\t\t\t\tconst yOld = this.yValueToCoord(Number(item.dataset.y), this.cache.oldMin, this.cache.oldMax, this.elements.chart);\r\n\r\n\t\t\t\t\t\tlet time = 400;\r\n\t\t\t\t\t\tif (this.elements.chart.classList.contains('dragging')){\r\n\t\t\t\t\t\t\ttime = 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.drawier.animateItem(item, 'y', yOld, y, time);\r\n\t\t\t\t\t\titem.classList.add('removing-item');\r\n\t\t\t\t\t\t// item.classList.remove('active-item');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcountToRemove--;\r\n\t\t\t}else{\r\n\t\t\t\tcountToRemove--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (countToRemove !== 0){\r\n\t\t\treturn this.removeItem(items, checkToNotRemove, countToRemove, action, settings);\r\n\t\t}else{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tnumberFormat(value) {\r\n\t\tconst fixed = this.settings.decimalsInThousandRounding;\r\n\t\t// Nine Zeroes for Billions\r\n\t\treturn Math.abs(Number(value)) >= 1.0e+9\r\n\r\n\t\t? parseFloat(Number(Math.abs(Number(value)) / 1.0e+9).toFixed(fixed)) + \"B\"\r\n\t\t// Six Zeroes for Millions\r\n\t\t: Math.abs(Number(value)) >= 1.0e+6\r\n\r\n\t\t? parseFloat(Number(Math.abs(Number(value)) / 1.0e+6).toFixed(fixed)) + \"M\"\r\n\t\t// Three Zeroes for Thousands\r\n\t\t: Math.abs(Number(value)) >= 1.0e+3\r\n\r\n\t\t? parseFloat(Number(Math.abs(Number(value)) / 1.0e+3).toFixed(fixed)) + \"K\"\r\n\r\n\t\t: Math.abs(Number(value));\r\n\t}\r\n\r\n\txValueToCoord(x, start, end){\r\n\r\n\t\treturn (1 - ((end - x) / (end - start))) * this.viewBoxWidth;\r\n\r\n\t}\r\n\r\n\tyValueToCoord(y, min, max, target){\r\n\r\n\t\treturn (((max - min) - (y - min)) / (max - min)) * (this.viewBoxWidth * this.settings.chartHeight) / (target.getBoundingClientRect().width / target.getBoundingClientRect().height);\r\n\r\n\t}\r\n\r\n}","import ChartData from './ChartData';\r\nimport ChartTemplate from './ChartTemplate';\r\n\r\nexport default class ChartController{\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.data = new ChartData(data);\r\n\r\n\t\tthis.view = new ChartTemplate({\r\n\t\t\tappendTarget: 'body',\r\n\t\t\tsettings: this.data.settings\r\n\t\t});\r\n\r\n\t\tthis.displayedDates = [];\r\n\r\n\t\tthis.displayedValues = [];\r\n\r\n\t\tthis.controlsState = {\r\n\t\t\tstartClicked        : false,\r\n\t\t\tendClicked          : false,\r\n\t\t\tmapRangeClicked     : false,\r\n\t\t\tchartMove           : false,\r\n\t\t\tchartReverceMove    : false,\r\n\t\t\tstartPosition       : 0,\r\n\t\t\tendPosition         : this.viewBoxWidth,\r\n\t\t\tclickInitialPosition: 0,\r\n\t\t\tminMapViewRange     : this.data.settings.minMapSpace\r\n\t\t};\r\n\r\n\t\tthis.main();\r\n\t}\r\n\r\n\tget viewBoxWidth(){\r\n\t\treturn this.data.settings.viewBoxWidth;\r\n\t}\r\n\tget chartSizeCoeff(){\r\n\t\treturn this.viewBoxWidth / this.view.elements.chartWrapper.clientWidth;\r\n\t}\r\n\r\n\tget currentStart(){\r\n\t\treturn this.view.startChartValue;\r\n\t}\r\n\r\n\tget currentEnd(){\r\n\t\treturn this.view.endChartValue + this.view.endChartWidth;\r\n\t}\r\n\r\n\tget absoluteMinMax(){\r\n\r\n\t\tconst start = this.data.totalValues.slice().shift();\r\n\t\tconst end = this.data.totalValues.slice().pop();\r\n\t\tconst range = end - start;\r\n\r\n\t\tlet min = start - range * 0.05;\r\n\r\n\t\tlet max = Math.round(end + range * 0.05);\r\n\r\n\t\tmin = Math.round(min / this.getOOM(min)) * this.getOOM(min);\r\n\r\n\t\tif ((min > 0 && ((min + range * 0.05) < 0)) || (min < 0 && ((min - range * 0.05) < 0))){\r\n\t\t\tmin = 0;\r\n\t\t}\r\n\r\n\t\treturn {min, max}\r\n\t}\r\n\r\n\tget stepOfValues(){\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(this.getStartAbsoluteValue(this.currentStart), this.getEndAbsoluteValue(this.currentEnd));\r\n\r\n\t\tconst countValuesToDisplay = Math.floor(this.view.elements.chartWrapper.clientHeight / 60);\r\n\r\n\t\tlet range = chartValuesMinMax.max - this.absoluteMinMax.min;\r\n\r\n\t\tlet stepNotRounded = range / countValuesToDisplay;\r\n\r\n\t\tlet step = Math.ceil(stepNotRounded / this.getOOM(stepNotRounded)) * this.getOOM(stepNotRounded);\r\n\r\n\t\tconst min = step - this.absoluteMinMax.min > chartValuesMinMax.min ? this.absoluteMinMax.min : chartValuesMinMax.min;\r\n\r\n\t\tif (min !== this.absoluteMinMax.min){\r\n\r\n\t\t\trange = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\t\tstepNotRounded = range / countValuesToDisplay;\r\n\r\n\t\t\tstep = Math.ceil(stepNotRounded / this.getOOM(stepNotRounded)) * this.getOOM(stepNotRounded);\r\n\t\t}\r\n\r\n\t\treturn {min, step};\r\n\r\n\t}\r\n\r\n\tgetChartMinMaxValueInRange(start, end){\r\n\r\n\t\tlet min = 99999999999999999;\r\n\t\tlet max = 0;\r\n\r\n\t\tif (this.data.activeLinesCount === 0){\r\n\t\t\t// Prevent the not smooth animation on disable last chart\r\n\t\t\treturn this.absoluteMinMax;\r\n\t\t}\r\n\r\n\t\tfor (let coordIndex in this.data.x){\r\n\t\t\tif (this.data.x[coordIndex] >= start && this.data.x[coordIndex] <= end){\r\n\t\t\t\tfor (let lineIndex in this.data.lines){\r\n\t\t\t\t\tconst line = this.data.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t\tmax = line.coords[coordIndex] > max ? line.coords[coordIndex] : max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor (let lineIndex in this.data.lines){\r\n\t\t\t\t\tconst line = this.data.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst range = max - min;\r\n\r\n\t\tmax += Math.round(range * 0.05);\r\n\r\n\t\tif (min > 0 && (min - range * 0.05) < 0){\r\n\t\t\tmin = 0;\r\n\t\t}\r\n\r\n\t\tmin = Math.round(min / (this.getOOM(min))) * this.getOOM(min);\r\n\r\n\t\treturn {min, max};\r\n\t}\r\n\r\n\tgetCoordsByIndex(coordIndex){\r\n\t\tconst x = this.data.x[coordIndex];\r\n\r\n\t\tconst coords = {\r\n\t\t\tx: x,\r\n\t\t\tvalues: []\r\n\t\t};\r\n\r\n\t\tfor (const lineId in this.data.lines){\r\n\t\t\tif (this.data.lines[lineId].active){\r\n\t\t\t\tcoords.values.push({\r\n\t\t\t\t\ty: this.data.lines[lineId].coords[coordIndex],\r\n\t\t\t\t\tcolor: this.data.lines[lineId].color,\r\n\t\t\t\t\tname: this.data.lines[lineId].name\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (coords.values.length > 0){\r\n\t\t\treturn coords;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCoordIndexByClientX(clientX){\r\n\r\n\t\tconst chart = this.view.elements.chartWrapper;\r\n\r\n\t\tconst chartCoeff = chart.querySelector('.chart-wrapper').getBoundingClientRect().width / chart.clientWidth;\r\n\t\r\n\t\t// get window start position inside the full chart\r\n\t\tconst chartStart = this.viewBoxWidth * (chartCoeff * this.controlsState.startPosition / this.viewBoxWidth);\r\n\r\n\t\tconst chartFullWidth = this.viewBoxWidth * chartCoeff;\r\n\r\n\t\tconst chartIntervalWidth = chartFullWidth / this.data.x.length;\r\n\r\n\t\t// get cursor position inside the full chart\r\n\t\tconst cursorPositionInChart = chartStart + (clientX - chart.getBoundingClientRect().left) / chart.clientWidth * this.viewBoxWidth;\r\n\r\n\t\tconst cursorShift = (((chartFullWidth / 2) - cursorPositionInChart) / chartFullWidth) * chartIntervalWidth;\r\n\r\n\t\tconst percentCursorPositionInChart = cursorPositionInChart / this.viewBoxWidth / chartCoeff;\r\n\r\n\t\treturn Math.floor(this.data.x.length * percentCursorPositionInChart + (cursorShift / chartCoeff));\r\n\r\n\t}\r\n\r\n\tgetStartAbsoluteValue(startPercent){\r\n\r\n\t\treturn this.data.totalStart + ((this.data.totalEnd - this.data.totalStart) * (startPercent / this.viewBoxWidth));\r\n\r\n\t}\r\n\r\n\tgetEndAbsoluteValue(endPercent){\r\n\r\n\t\treturn this.data.totalEnd - ((this.data.totalEnd - this.data.totalStart) * (1 - (endPercent / this.viewBoxWidth)));\r\n\r\n\t}\r\n\r\n\t// get order of magnitude\r\n\tgetOOM(n) {\r\n\t\tif (Math.abs(n) > 0){\r\n\t\t\tconst order = Math.floor(Math.log(Math.abs(n)) / Math.LN10 + 0.000000001);\r\n\t\t\treturn Math.pow(10,order);\r\n\t\t}else{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tmain(){\r\n\r\n\t\tthis.view.init();\r\n\r\n\t\tthis.updateLines({target: this.view.elements.chart, drawValues: true});\r\n\t\tthis.updateLines({target: this.view.elements.map});\r\n\r\n\t\tthis.view.initControlButtons(this.data.lines);\r\n\r\n\t\tthis.setEventListeners();\r\n\r\n\t}\r\n\r\n\r\n\tsetEventListeners(){\r\n\r\n\t\tthis.buttonsListeners();\r\n\r\n\t\tthis.dragStartListeners();\r\n\r\n\t\tthis.dragEndListeners();\r\n\r\n\t\tthis.moveListeners();\r\n\r\n\r\n\r\n\t}\r\n\r\n\tupdateLines({target, startPercent = 0, endPercent = this.data.settings.viewBoxWidth, drawValues = false}){\r\n\r\n\t\tlet start = this.getStartAbsoluteValue(startPercent);\r\n\t\tlet end = this.getEndAbsoluteValue(endPercent);\r\n\r\n\t\t// Disable zoom less than 100%\r\n\t\tstart = this.totalStart > start ? this.totalStart : start;\r\n\t\tend = this.totalEnd < end ? this.totalEnd : end;\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\r\n\t\tthis.view.createLines({\r\n\t\t\ttarget,\r\n\t\t\tx: this.data.x,\r\n\t\t\tlines: this.data.lines,\r\n\t\t\tstart,\r\n\t\t\tend,\r\n\t\t\tmin: this.stepOfValues.min,\r\n\t\t\tmax: chartValuesMinMax.max\r\n\t\t});\r\n\r\n\t\tif (drawValues){\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.updateDates(target, start, end);\r\n\t\t\t\tthis.updateValues(target, chartValuesMinMax);\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t\tif (this.data.activeLinesCount > 0){\r\n\t\t\tthis.updateChartData(true);\r\n\t\t}else{\r\n\t\t\tthis.updateChartData(false);\r\n\t\t}\r\n\t}\r\n\r\n\tupdateValues(target, chartValuesMinMax){\r\n\r\n\t\tif (this.data.activeLinesCount > 0){\r\n\r\n\t\t\tconst step = this.stepOfValues.step;\r\n\r\n\t\t\tconst min = this.stepOfValues.min;\r\n\r\n\t\t\tconst totalRange = this.absoluteMinMax.max - min;\r\n\r\n\t\t\tconst totalDrawsCount = Math.floor(totalRange / step);\r\n\r\n\t\t\tconst steps = [];\r\n\r\n\t\t\tconst currentStepsClasses = [];\r\n\r\n\t\t\tfor (let i = 0; i <= totalDrawsCount; i++){\r\n\t\t\t\tconst value = (step * i) + min;\r\n\t\t\t\tsteps.push(value);\r\n\t\t\t\tcurrentStepsClasses.push(`value-${value}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.removeItems('value-item', currentStepsClasses, 'hideByY', {min: min, max: chartValuesMinMax.max});\r\n\r\n\t\t\tthis.view.createValues({\r\n\t\t\t\ttarget,\r\n\t\t\t\tsteps,\r\n\t\t\t\tmin: min,\r\n\t\t\t\tmax: chartValuesMinMax.max\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.view.removeItems('value-item', [], 'hide');\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateDates(target, start, end){\r\n\r\n\t\tif (this.data.activeLinesCount > 0){\r\n\r\n\t\t\tconst range = this.data.x.slice();\r\n\r\n\t\t\tlet totalStartDate = range.shift();\r\n\r\n\t\t\tlet totalEndDate = range.pop();\r\n\r\n\t\t\tconst offset = Math.floor((totalEndDate - totalStartDate) * (this.chartSizeCoeff / 4));\r\n\r\n\t\t\ttotalStartDate += offset;\r\n\r\n\t\t\ttotalEndDate -= offset;\r\n\r\n\t\t\tconst windowWidthDrawsCount = Math.floor((target.getBoundingClientRect().width) / 80);\r\n\r\n\t\t\tconst wrapperWidth = target.querySelector('.chart-wrapper').getBoundingClientRect().width > 0 ? target.querySelector('.chart-wrapper').getBoundingClientRect().width : this.view.elements.chartWrapper.clientWidth;\r\n\r\n\t\t\tlet myltiple = Math.floor((wrapperWidth / target.getBoundingClientRect().width) * 1.1);\r\n\r\n\t\t\tmyltiple = Math.pow(2, Math.floor(Math.log2(myltiple)));\r\n\r\n\t\t\tconst totalDrawsCount = windowWidthDrawsCount * myltiple;\r\n\r\n\t\t\tlet step = Math.floor((totalEndDate - totalStartDate) / totalDrawsCount);\r\n\r\n\t\t\tif (!this.controlsState.mapRangeClicked){\r\n\r\n\t\t\t\tthis.displayedDates = [];\r\n\r\n\t\t\t\tconst currentDatesClasses = [];\r\n\r\n\t\t\t\tfor (let i = 0; i <= totalDrawsCount; i++){\r\n\t\t\t\t\tconst dateValue = Math.floor((Number(totalStartDate) + (step * i)) / 86400000) * 86400000;\r\n\t\t\t\t\tcurrentDatesClasses.push(`date-${dateValue}`);\r\n\t\t\t\t\tthis.displayedDates.push(dateValue);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (offset > step){\r\n\t\t\t\t\tcurrentDatesClasses.push(`date-${totalStartDate - offset}`);\r\n\t\t\t\t\tthis.displayedDates.push(totalStartDate - offset);\r\n\t\t\t\t\tcurrentDatesClasses.push(`date-${totalEndDate + offset}`);\r\n\t\t\t\t\tthis.displayedDates.push(totalEndDate + offset);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.view.removeItems('date-text', currentDatesClasses, 'hide');\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.createDates({\r\n\t\t\t\ttarget,\r\n\t\t\t\tdates: this.displayedDates,\r\n\t\t\t\tstart,\r\n\t\t\t\tend,\r\n\t\t\t\ttotalStartDate: this.data.totalStart,\r\n\t\t\t\ttotalEndDate: this.data.totalEnd\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.view.removeItems('date-text', [], 'hide');\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateTooltip(event){\r\n\r\n\t\tlet start = this.getStartAbsoluteValue(this.currentStart);\r\n\r\n\t\tlet end = this.getEndAbsoluteValue(this.currentEnd);\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\r\n\t\tconst coordIndex = this.getCoordIndexByClientX(event.clientX || event.touches[0].clientX);\r\n\r\n\t\tconst coords = this.getCoordsByIndex(coordIndex);\r\n\r\n\t\tif(coords.x){\r\n\t\t\tthis.view.createTooltip({\r\n\t\t\t\tx: coords.x,\r\n\t\t\t\tvalues: coords.values,\r\n\t\t\t\tclientY: event.clientY || event.touches[0].clientY,\r\n\t\t\t\tstart,\r\n\t\t\t\tend,\r\n\t\t\t\tmin: this.stepOfValues.min,\r\n\t\t\t\tmax: chartValuesMinMax.max\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tupdateChartData(hasDataToDisplay){\r\n\t\tif (hasDataToDisplay){\r\n\t\t\tthis.view.removeItems('no-data-placeholder');\r\n\t\t}else{\r\n\t\t\tthis.view.removeItems('tooltip-item');\r\n\t\t\tthis.view.addNoDataPlaceholder();\r\n\t\t}\r\n\t}\r\n\r\n\tupdateSettings(){\r\n\t\tthis.view.settings = this.data.settings;\r\n\t\tthis.view.setCurrentColorScheme();\r\n\t}\r\n\r\n\tmoveChart(event){\r\n\r\n\t\tconst clientX = event.clientX || event.touches[0].clientX;\r\n\r\n\t\tif (this.controlsState.startClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\tconst valueStart = this.controlsState.startPosition + (0 - (this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.viewBoxWidth;\r\n\r\n\t\t\tthis.view.changeStartPosition(valueStart, this.controlsState.minMapViewRange);\r\n\r\n\t\t}\r\n\r\n\t\tif (this.controlsState.endClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\tconst valueEnd = (this.controlsState.endPosition + (0 - (this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.viewBoxWidth);\r\n\r\n\t\t\tthis.view.changeEndPosition(valueEnd, this.controlsState.minMapViewRange);\r\n\t\t}\r\n\r\n\r\n\t\tif(this.controlsState.chartMove){\r\n\r\n\t\t\tthis.view.removeItems('tooltip-item');\r\n\r\n\t\t\tconst startPercent = this.currentStart;\r\n\r\n\t\t\tconst endPercent = this.currentEnd;\r\n\r\n\t\t\tthis.view.elements.chart.classList.add('dragging');\r\n\r\n\t\t\tthis.updateLines({target: this.view.elements.chart, startPercent, endPercent, drawValues: true});\r\n\r\n\t\t\tsetTimeout(() => {\r\n\r\n\t\t\t\tthis.view.elements.chart.classList.remove('dragging');\r\n\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tbuttonsListeners(){\r\n\r\n\t\tfor (const button of this.view.elements.buttons){\r\n\r\n\t\t\tbutton.addEventListener('click', () => {\r\n\r\n\t\t\t\tconst lineID = button.dataset.lineid;\r\n\r\n\t\t\t\tconst lines = this.view.elements.layout.getElementsByClassName(`line-${lineID}`);\r\n\r\n\t\t\t\tif (this.data.lines[lineID].active){\r\n\t\t\t\t\tbutton.classList.remove('active');\r\n\t\t\t\t\tthis.data.lines[lineID].active = false;\r\n\t\t\t\t\tfor (const line of lines){\r\n\t\t\t\t\t\tline.style.opacity = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbutton.classList.add('active');\r\n\t\t\t\t\tthis.data.lines[lineID].active = true;\r\n\t\t\t\t\tfor (const line of lines){\r\n\t\t\t\t\t\tline.style.opacity = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.updateLines({\r\n\t\t\t\t\ttarget: this.view.elements.chart,\r\n\t\t\t\t\tstartPercent: this.currentStart,\r\n\t\t\t\t\tendPercent: this.currentEnd,\r\n\t\t\t\t\tdrawValues: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.updateLines({\r\n\t\t\t\t\ttarget: this.view.elements.map,\r\n\t\t\t\t\tstartPercent: 0,\r\n\t\t\t\t\tendPercent: this.viewBoxWidth,\r\n\t\t\t\t\tdrawValues: false\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tdragEndListeners(){\r\n\r\n\t\tdocument.addEventListener('mouseup',  () => this.clearConsrolState());\r\n\t\tdocument.addEventListener('touchend', () => this.clearConsrolState());\r\n\r\n\t}\r\n\r\n\tdragStartListeners(){\r\n\r\n\t\t// move chart by dragging map range\r\n\t\tthis.view.layoutContorls.viewRange.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.currentEnd - this.currentStart;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.viewRange.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.currentEnd - this.currentStart;\r\n\t\t});\r\n\r\n\r\n\r\n\t\t// change start position\r\n\t\tthis.view.layoutContorls.startChartSlider.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.startClicked         = true;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.startChartSlider.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.startClicked         = true;\r\n\t\t});\r\n\r\n\r\n\t\t// change end position\r\n\t\tthis.view.layoutContorls.endChartSlider.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.endClicked           = true;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.endChartSlider.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.endClicked           = true;\r\n\t\t});\r\n\r\n\r\n\r\n\t}\r\n\r\n\tmoveListeners(){\r\n\r\n\t\tdocument.addEventListener('mousemove', (event) => {\r\n\t\t\tthis.moveChart(event);\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener('touchmove', (event) => {\r\n\t\t\tthis.moveChart(event);\r\n\t\t});\r\n\r\n\t\tthis.view.elements.chart.addEventListener('mousemove', event => this.updateTooltip(event));\r\n\t\tthis.view.elements.chart.addEventListener('touchmove', event => this.updateTooltip(event));\r\n\r\n\t\tthis.view.elements.chart.addEventListener('mouseleave', () => this.view.removeItems('tooltip-item'));\r\n\r\n\t}\r\n\r\n\r\n\tclearConsrolState(){\r\n\t\tthis.controlsState.startPosition    = this.view.startChartValue;\r\n\t\tthis.controlsState.endPosition      = this.view.endChartValue;\r\n\t\tthis.controlsState.minMapViewRange  = this.data.settings.minMapSpace;\r\n\t\tthis.controlsState.startClicked     = false;\r\n\t\tthis.controlsState.endClicked       = false;\r\n\t\tthis.controlsState.chartReverceMove = false;\r\n\t\tthis.controlsState.chartMove        = false;\r\n\t\tthis.controlsState.mapRangeClicked  = false;\r\n\t}\r\n\r\n\r\n\r\n\r\n}","import ChartController from './ChartController';\r\n\r\nexport default class Chart {\r\n\r\n\tconstructor(data){\r\n\t\tthis.chart = new ChartController(data);\r\n\t}\r\n\r\n\tchangeSetting(settingName, settingValue){\r\n\t\tthis.chart.data.settings[settingName] = settingValue;\r\n\t\tthis.chart.updateSettings();\r\n\t}\r\n}","export const getJSON = function(url) {\r\n\r\n\treturn new Promise(function(resolve, reject){\r\n\r\n\t\tconst request = new XMLHttpRequest();\r\n\r\n\t\trequest.open('GET', url, true);\r\n\r\n\t\trequest.onload = function () {\r\n\r\n\t\t\tif (request.status >= 200 && request.status < 300) {\r\n\r\n\t\t\t\tresolve(JSON.parse(request.responseText));\r\n\r\n\t\t\t}else{\r\n\r\n\t\t\t\treject('Error: HTTP status - ' + request.status + ' on resource ' + url);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequest.send();\r\n\r\n\t});\r\n}\r\n","import Chart from './Chart';\r\n\r\nimport { getJSON } from './Resources';\r\n\r\nconst charts = [];\r\n\r\nconst switchLink = document.createElement('a');\r\n\r\nswitchLink.setAttribute('class', 'switch-link');\r\n\r\nswitchLink.dataset.currentmode = 'day';\r\n\r\nswitchLink.innerHTML = `Switch to night mode`;\r\n\r\nswitchLink.addEventListener('click', (event) => {\r\n\r\n\tconst button = event.target;\r\n\r\n\tconst currentMode = button.dataset.currentmode;\r\n\r\n\tconst switchTo = button.dataset.currentmode === 'day' ? 'night' : 'day';\r\n\r\n\tif (charts.length > 0){\r\n\t\tfor (const chart of charts){\r\n\t\t\tchart.changeSetting('currentMode', switchTo);\r\n\t\t}\r\n\t\tbutton.dataset.currentmode = switchTo;\r\n\t\tbutton.innerHTML = `Switch to ${currentMode} mode`;\r\n\t\tbutton.style.color = switchTo === 'night' ? '#fff' : '#333';\r\n\t}\r\n});\r\n\r\ndocument.querySelector('body').appendChild(switchLink);\r\n\r\ngetJSON('data/chart_data.json').then((data) => {\r\n\tfor (const dataOfChart of data){\r\n\t\tcharts.push(new Chart(dataOfChart));\r\n\t}\r\n});"],"sourceRoot":""}