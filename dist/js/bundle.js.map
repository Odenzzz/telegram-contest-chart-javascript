{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/ChartController.js","webpack:///./src/js/ChartData.js","webpack:///./src/js/ChartDrawier.js","webpack:///./src/js/ChartTemplate.js","webpack:///./src/js/script.js","webpack:///./src/scss/style.scss"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAoC;AACQ;;AAE7B;;AAEf;;AAEA,kBAAkB,kDAAS;;AAE3B,kBAAkB,sDAAa;AAC/B;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA,oBAAoB,mDAAmD;AACvE,oBAAoB,+BAA+B;;AAEnD;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,2EAA2E,OAAO;;AAElF;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI;AACJ;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;;;AAIH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;;;AAIH;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,UAAU;AACV;;AAEA,cAAc,2FAA2F;;AAEzG;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA,qCAAqC,UAAU;AAC/C;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;;AAIH;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;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;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,2BAA2B,+CAA+C,GAAG,oBAAoB;AACjG;AACA;;AAEA;AACA;;AAEA;AACA,iDAAiD,KAAK;AACtD;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACpaA;AAAA;AAAA;AAAA;AAA2C;AACK;;;AAGhD;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,UAAU;AACV;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA,qCAAqC,UAAU;AAC/C;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA,4CAA4C,KAAK;;AAEjD;AACA;;AAEA;AACA,wBAAwB,iCAAiC,GAAG,oBAAoB;AAChF;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,8CAA8C,KAAK;AACnD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iBAAiB,2BAA2B;AAC5C;AACA;AACA,qCAAqC,MAAM;AAC3C;;AAEA;;AAEA;;AAEA;;;AAGA,6CAA6C,MAAM;;AAEnD,6CAA6C,MAAM;;AAEnD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC,EAAE,GAAG,EAAE,KAAK,kBAAkB,GAAG,EAAE;AACzE,sEAAsE,MAAM,SAAS,MAAM;;AAE3F;AACA;;AAEA,wDAAwD,EAAE;AAC1D;AACA;AACA;;AAEA;AACA,sEAAsE,MAAM,SAAS,MAAM;;;AAG3F;;AAEA;;AAEA,sBAAsB,UAAU;;AAEhC;AACA;AACA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;AAEA;;AAEA,qDAAqD,EAAE;;AAEvD;;AAEA,4DAA4D,EAAE;;AAE9D;;AAEA,sDAAsD,EAAE;;AAExD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA,gDAAgD,kCAAkC,IAAI,iCAAiC,GAAG,oBAAoB;AAC9I;;AAEA;;AAEA,6DAA6D,aAAa;;AAE1E;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,EAAE,iBAAiB,aAAa;;AAE1F;;AAEA;;AAEA;AACA;AACA,uEAAuE,iBAAiB;AACxF,mCAAmC,4CAA4C,EAAE,kBAAkB;AACnG,wCAAwC,gBAAgB;AACxD;;AAEA;;AAEA;;AAEA;AACA;AACA,8DAA8D,EAAE;AAChE,mDAAmD,EAAE;AACrD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,wDAAwD,EAAE;;AAE1D,6CAA6C,OAAO,OAAO,OAAO,GAAG,IAAI;;AAEzE;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,IAAI;AACjC,8BAA8B,KAAK;;;AAGnC;;AAEA,YAAY,6EAA6E;;AAEzF;AACA;;;AAGA;;AAEA,wCAAwC,kBAAkB,GAAG,qCAAqC;;AAElG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,yCAAyC,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE;;AAEjE;;AAEA,4CAA4C,OAAO;;AAEnD;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,wDAAe;;AAElC;;AAEA;;;;AAIA;AACA,UAAU,6CAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2B;;;;;;;;;;;ACpbA,uC","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import ChartData from './ChartData';\r\nimport ChartTemplate from './ChartTemplate';\r\n\r\nexport default class ChartController{\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.data = new ChartData(data);\r\n\r\n\t\tthis.view = new ChartTemplate({\r\n\t\t\tappendTarget: 'body',\r\n\t\t\tsettings: this.data.settings\r\n\t\t});\r\n\r\n\t\tthis.displayedDates = [];\r\n\r\n\t\tthis.displayedValues = [];\r\n\r\n\t\tthis.controlsState = {\r\n\t\t\tstartClicked        : false,\r\n\t\t\tendClicked          : false,\r\n\t\t\tmapRangeClicked     : false,\r\n\t\t\tchartMove           : false,\r\n\t\t\tchartReverceMove    : false,\r\n\t\t\tstartPosition       : 0,\r\n\t\t\tendPosition         : this.viewBoxWidth,\r\n\t\t\tclickInitialPosition: 0\r\n\t\t};\r\n\r\n\t\tthis.main();\r\n\t}\r\n\r\n\tget viewBoxWidth(){\r\n\t\treturn this.data.settings.viewBoxWidth;\r\n\t}\r\n\r\n\tgetCoordsByIndex(coordIndex){\r\n\r\n\t\tconst x = this.chart.x[coordIndex];\r\n\r\n\t\tconst coords = {\r\n\t\t\tx: x,\r\n\t\t\tvalues: []\r\n\t\t};\r\n\r\n\t\tfor (const lineId in this.chart.lines){\r\n\t\t\tif (this.chart.lines[lineId].active){\r\n\t\t\t\tcoords.values.push({\r\n\t\t\t\t\ty: this.chart.lines[lineId].coords[coordIndex],\r\n\t\t\t\t\tcolor: this.chart.lines[lineId].color,\r\n\t\t\t\t\tname: this.chart.lines[lineId].name\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (coords.values.length > 0){\r\n\t\t\treturn coords;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCoordIndexByClientX(clientX){\r\n\r\n\t\tconst chartCoeff = this.chartWindow.querySelector('.chart-wrapper').getBoundingClientRect().width / this.chartWindow.clientWidth;\r\n\r\n\t\t// get window start position inside the full chart\r\n\t\tconst chartStart = this.chart.viewBoxWidth * (chartCoeff * this.controlsState.startPosition / this.chart.viewBoxWidth);\r\n\r\n\t\tconst chartFullWidth = this.chart.viewBoxWidth * chartCoeff;\r\n\r\n\t\tconst chartIntervalWidth = chartFullWidth / this.chart.x.length;\r\n\r\n\t\t// get cursor position inside the full chart\r\n\t\tconst cursorPositionInChart = chartStart + (clientX - this.chartWindow.getBoundingClientRect().left) / this.chartWindow.clientWidth * this.chart.viewBoxWidth;\r\n\r\n\t\tconst cursorShift = (((chartFullWidth / 2) - cursorPositionInChart) / chartFullWidth) * chartIntervalWidth;\r\n\r\n\t\tconst percentCursorPositionInChart = cursorPositionInChart / this.chart.viewBoxWidth / chartCoeff;\r\n\r\n\t\treturn Math.floor(this.chart.x.length * percentCursorPositionInChart + (cursorShift / chartCoeff));\r\n\r\n\t}\r\n\r\n\r\n\tmain(){\r\n\r\n\t\tthis.view.init();\r\n\r\n\t\tthis.updateGraph({target: this.view.elements.chart, drawValues: true});\r\n\t\tthis.updateGraph({target: this.view.elements.map});\r\n\r\n\t\tthis.view.initControlButtons(this.data.lines);\r\n\r\n\t\tthis.setEventListeners();\r\n\r\n\t}\r\n\r\n\r\n\tsetEventListeners(){\r\n\r\n\t\tthis.setButtonsListeners();\r\n\r\n\t\tthis.dragStartListeners();\r\n\r\n\t\tthis.dragEndListeners();\r\n\r\n\t\tthis.moveListeners();\r\n\r\n\r\n\r\n\t}\r\n\r\n\tsetButtonsListeners(){\r\n\t\tfor (const button of this.view.elements.buttons){\r\n\r\n\t\t\tbutton.addEventListener('click', () => {\r\n\r\n\t\t\t\tconst lineID = button.dataset.lineid;\r\n\r\n\t\t\t\tconst lines = this.view.elements.layout.getElementsByClassName(`line-${lineID}`);\r\n\r\n\t\t\t\tif (this.data.lines[lineID].active){\r\n\t\t\t\t\tthis.data.lines[lineID].active = false;\r\n\t\t\t\t\tfor (const line of lines){\r\n\t\t\t\t\t\tline.style.opacity = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.data.lines[lineID].active = true;\r\n\t\t\t\t\tfor (const line of lines){\r\n\t\t\t\t\t\tline.style.opacity = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.updateGraph({\r\n\t\t\t\t\ttarget: this.view.elements.chart,\r\n\t\t\t\t\tstartPercent: this.view.startChartValue,\r\n\t\t\t\t\tendPercent: this.view.endChartValue + this.view.endChartWidth,\r\n\t\t\t\t\tdrawValues: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.updateGraph({\r\n\t\t\t\t\ttarget: this.view.elements.map,\r\n\t\t\t\t\tstartPercent: 0,\r\n\t\t\t\t\tendPercent: this.viewBoxWidth,\r\n\t\t\t\t\tdrawValues: false\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tdragEndListeners(){\r\n\r\n\t\tdocument.addEventListener('mouseup',  () => this.clearConsrolState());\r\n\t\tdocument.addEventListener('touchend', () => this.clearConsrolState());\r\n\r\n\t}\r\n\r\n\tdragStartListeners(){\r\n\r\n\t\t// move chart by dragging chart\r\n\t\tthis.view.elements.chart.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.chartReverceMove     = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\t\tthis.view.elements.chart.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.chartReverceMove     = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\r\n\t\t// move chart by dragging map range\r\n\t\tthis.view.layoutContorls.viewRange.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.viewRange.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\r\n\r\n\t\t// change start position\r\n\t\tthis.view.layoutContorls.startChartSlider.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.startClicked         = true;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.startChartSlider.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.startClicked         = true;\r\n\t\t});\r\n\r\n\r\n\t\t// change end position\r\n\t\tthis.view.layoutContorls.endChartSlider.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.endClicked           = true;\r\n\t\t});\r\n\r\n\t\tthis.view.layoutContorls.endChartSlider.addEventListener('touchstart', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.touches[0].clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.endClicked           = true;\r\n\t\t});\r\n\r\n\r\n\r\n\t}\r\n\r\n\tmoveListeners(){\r\n\r\n\t\tdocument.addEventListener('mousemove', (event) => {\r\n\t\t\tthis.moveChart(event);\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener('touchmove', (event) => {\r\n\t\t\tthis.moveChart(event);\r\n\t\t\tconst element = event.touches[0];\r\n\t\t\tif (element.target !== this.view.chartWindow){\r\n\t\t\t\tthis.view.removeItems('tooltip-item');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.view.elements.chart.addEventListener('mousemove', event => this.initTooltip(event));\r\n\t\tthis.view.elements.chart.addEventListener('touchmove', event => this.initTooltip(event));\r\n\r\n\t\tthis.view.elements.chart.addEventListener('mouseleave', () => this.view.removeItems('tooltip-item'));\r\n\r\n\t}\r\n\r\n\r\n\tclearConsrolState(){\r\n\t\tthis.controlsState.startPosition    = this.view.startChartValue;\r\n\t\tthis.controlsState.endPosition      = this.view.endChartValue;\r\n\t\tthis.controlsState.minMapViewRange  = this.viewBoxWidth * this.data.settings.minMapSpace;\r\n\t\tthis.controlsState.startClicked     = false;\r\n\t\tthis.controlsState.endClicked       = false;\r\n\t\tthis.controlsState.chartReverceMove = false;\r\n\t\tthis.controlsState.chartMove        = false;\r\n\t\tthis.controlsState.mapRangeClicked  = false;\r\n\t}\r\n\r\n\r\n\tgetStartAbsoluteValue(startPercent){\r\n\r\n\t\treturn this.data.totalStart + ((this.data.totalEnd - this.data.totalStart) * (startPercent / this.viewBoxWidth));\r\n\r\n\t}\r\n\r\n\tgetEndAbsoluteValue(endPercent){\r\n\r\n\t\treturn this.data.totalEnd - ((this.data.totalEnd - this.data.totalStart) * (1 - (endPercent / this.viewBoxWidth)));\r\n\r\n\t}\r\n\r\n\r\n\tgetChartMinMaxValueInRange(start, end){\r\n\r\n\t\tlet min = 99999999999999999;\r\n\t\tlet max = 0;\r\n\r\n\t\tif (this.data.activeLinesCount === 0){\r\n\t\t\t// Prevent the not smooth animation on disable last chart\r\n\t\t\treturn {min: 0, max: this.viewBoxWidth};\r\n\t\t}\r\n\r\n\t\tfor (let coordIndex in this.data.x){\r\n\t\t\tif (this.data.x[coordIndex] >= start && this.data.x[coordIndex] <= end){\r\n\t\t\t\tfor (let lineIndex in this.data.lines){\r\n\t\t\t\t\tconst line = this.data.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t\tmax = line.coords[coordIndex] > max ? line.coords[coordIndex] : max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor (let lineIndex in this.data.lines){\r\n\t\t\t\t\tconst line = this.data.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst range = max - min;\r\n\r\n\t\tmax += range * 0.05;\r\n\r\n\t\tif (min > 0 && (min - range * 0.05) < 0){\r\n\t\t\tmin = 0;\r\n\t\t}else{\r\n\t\t\tmin -= range * 0.05;\r\n\t\t\tmin = Math.floor(min / this.getOOM(min)) * this.getOOM(min);\r\n\t\t}\r\n\r\n\t\treturn {min, max};\r\n\t}\r\n\r\n\tupdateGraph({target, startPercent = 0, endPercent = this.data.settings.viewBoxWidth, drawValues = false}){\r\n\r\n\t\tlet start = this.getStartAbsoluteValue(startPercent);\r\n\t\tlet end = this.getEndAbsoluteValue(endPercent);\r\n\r\n\t\tstart = this.totalStart > start ? this.totalStart : start;\r\n\t\tend = this.totalEnd < end ? this.totalEnd : end;\r\n\r\n\t\t// Disable zoom less than 100%\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\r\n\t\tthis.view.createLines({\r\n\t\t\ttarget,\r\n\t\t\tx: this.data.x,\r\n\t\t\tlines: this.data.lines,\r\n\t\t\tstart,\r\n\t\t\tend,\r\n\t\t\tmin: chartValuesMinMax.min,\r\n\t\t\tmax: chartValuesMinMax.max\r\n\t\t});\r\n\r\n\t\tif (drawValues){\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.updateDates(target, start, end);\r\n\t\t\t\t// this.drawValues(target, chartValuesMinMax);\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tupdateDates(target, start, end){\r\n\r\n\t\tconst range = this.data.x.slice();\r\n\t\tconst totalStartDate = range.shift();\r\n\t\tconst totalEndDate = range.pop();\r\n\r\n\t\tif (!this.controlsState.mapRangeClicked){\r\n\r\n\t\t\tconst windowWidthDrawsCount = Math.floor((target.getBoundingClientRect().width) / 80);\r\n\r\n\t\t\tlet myltiple = Math.floor((target.querySelector('.chart-wrapper').getBoundingClientRect().width / target.getBoundingClientRect().width) * 1.3);\r\n\r\n\t\t\tmyltiple = Math.pow(2, Math.floor(Math.log2(myltiple)));\r\n\r\n\t\t\tconst totalDrawsCount = windowWidthDrawsCount * myltiple;\r\n\r\n\t\t\tconst step = Math.floor((totalEndDate - totalStartDate) / totalDrawsCount);\r\n\r\n\t\t\tthis.displayedDates = [];\r\n\r\n\t\t\tconst currentDatesClasses = [];\r\n\r\n\t\t\tfor (let i = 0; i <= totalDrawsCount; i++){\r\n\t\t\t\tconst dateValue = Math.floor((totalStartDate + (step * i)) / 86400000) * 86400000;\r\n\t\t\t\tcurrentDatesClasses.push(`date-${dateValue}`);\r\n\t\t\t\tthis.displayedDates.push(dateValue);\r\n\t\t\t}\r\n\r\n\t\t\tthis.displayedDates.push(Math.floor((totalEndDate) / 86400000) * 86400000);\r\n\r\n\t\t\tthis.view.removeItems('date-text', currentDatesClasses, 'hide');\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.createDates({\r\n\t\t\ttarget,\r\n\t\t\tdates: this.displayedDates,\r\n\t\t\tstart,\r\n\t\t\tend,\r\n\t\t\ttotalStartDate,\r\n\t\t\ttotalEndDate\r\n\t\t})\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n\t// get order of magnitude\r\n\tgetOOM(n) {\r\n\t\tif (Math.abs(n) > 0){\r\n\t\t\tconst order = Math.floor(Math.log(Math.abs(n)) / Math.LN10 + 0.000000001);\r\n\t\t\treturn Math.pow(10,order);\r\n\t\t}else{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tmoveChart(event){\r\n\r\n\t\tconst clientX = event.clientX || event.touches[0].clientX;\r\n\r\n\t\tif (this.controlsState.startClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\tlet valueStart;\r\n\r\n\t\t\tif (this.controlsState.chartReverceMove){\r\n\t\t\t\tvalueStart = this.controlsState.startPosition + ((this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.view.viewRangeWidth;\r\n\t\t\t}else{\r\n\t\t\t\tvalueStart = this.controlsState.startPosition + (0 - (this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.viewBoxWidth;\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.changeStartPosition(valueStart);\r\n\r\n\t\t}\r\n\r\n\t\tif (this.controlsState.endClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\tlet valueEnd;\r\n\r\n\t\t\tif (this.controlsState.chartReverceMove){\r\n\t\t\t\tvalueEnd = (this.controlsState.endPosition + ((this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.view.viewRangeWidth);\r\n\t\t\t}else{\r\n\t\t\t\tvalueEnd = (this.controlsState.endPosition + (0 - (this.controlsState.clickInitialPosition - clientX) / this.view.elements.layout.clientWidth) * this.viewBoxWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.changeEndPosition(valueEnd);\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif(this.controlsState.chartMove){\r\n\r\n\t\t\tthis.view.removeItems('tooltip-item');\r\n\r\n\t\t\tconst startPercent = this.view.startChartValue;\r\n\r\n\t\t\tconst endPercent = this.view.endChartValue + this.view.endChartWidth;\r\n\r\n\t\t\tthis.view.elements.chart.classList.add('dragging');\r\n\r\n\t\t\tthis.updateGraph({target: this.view.elements.chart, startPercent, endPercent, drawValues: true});\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.view.elements.chart.classList.remove('dragging');\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}","export default class ChartData {\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.settings = {\r\n\r\n\t\t\t// width of viewBox\r\n\t\t\tviewBoxWidth: 100,\r\n\r\n\t\t\tnightMode: {\r\n\r\n\t\t\t\t// background of all chart\r\n\t\t\t\tbackground: '#242f3e',\r\n\r\n\t\t\t\t// background of tooltip\r\n\t\t\t\ttooltipBackground: '#253241',\r\n\r\n\t\t\t\t// line of selected date color\r\n\t\t\t\ttooltipLineColor: '#3b4a5a',\r\n\r\n\t\t\t\t// color of value lines\r\n\t\t\t\tvalueLineColor: '#293544',\r\n\r\n\t\t\t\t// dates and values on X and Y axis color\r\n\t\t\t\ttextColor: '#546778',\r\n\r\n\t\t\t\t// color of dragging blocks (start and end on map)\r\n\t\t\t\tstartEndColor: 'rgba(112, 149, 185, 0.5)',\r\n\r\n\t\t\t\t// color on map of hiden chart elements\r\n\t\t\t\tmapNotVisibleBackground: 'rgba(16, 25, 37, 0.5)',\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdayMode: {\r\n\r\n\t\t\t\t// background of all chart\r\n\t\t\t\tbackground: '#ffffff',\r\n\r\n\t\t\t\t// background of tooltip\r\n\t\t\t\ttooltipBackground: '#ffffff',\r\n\r\n\t\t\t\t// line of selected date color\r\n\t\t\t\ttooltipLineColor: '#dfe6eb',\r\n\r\n\t\t\t\t// color of value lines\r\n\t\t\t\tvalueLineColor: '#f2f4f5',\r\n\r\n\t\t\t\t// dates and values on X and Y axis color\r\n\t\t\t\ttextColor: '#96a2aa',\r\n\r\n\t\t\t\t// color of dragging blocks (start and end on map)\r\n\t\t\t\tstartEndColor: 'rgba(183, 207, 223, 0.5)',\r\n\r\n\t\t\t\t// color on map of hiden chart elements\r\n\t\t\t\tmapNotVisibleBackground: 'rgba(221, 234, 241, 0.5)',\r\n\r\n\t\t\t},\r\n\r\n\t\t\tmonthNames: [\r\n\t\t\t\t\"Dec\", \"Jan\", \"Feb\", \"Mar\",\r\n\t\t\t\t\"Apr\", \"May\", \"Jun\", \"Jul\",\r\n\t\t\t\t\"Aug\", \"Sep\", \"Oct\",\r\n\t\t\t\t\"Nov\"\r\n\t\t\t],\r\n\r\n\t\t\tweekdaysNames: [\r\n\t\t\t\t\"Sun\", \"Mon\",\r\n\t\t\t\t\"Tue\", \"Wed\",\r\n\t\t\t\t\"Thu\", \"Fri\",\r\n\t\t\t\t\"Sat\"\r\n\t\t\t],\r\n\r\n\t\t\t// width of sliders on map (in percents)\r\n\t\t\tmapSliderWidth: 0.02,\r\n\r\n\t\t\tcurrentMode: 'day',\r\n\r\n\t\t\tchartLineWidth: 0.004,\r\n\r\n\t\t\t// height relative to the wrapper (in percent)\r\n\t\t\tchartHeight: 0.93,\r\n\r\n\t\t\t// minimal space between start and end\r\n\t\t\tminMapSpace: 0.15,\r\n\t\t}\r\n\r\n\t\tthis.lines = {};\r\n\r\n\t\tthis.totalValues = [];\r\n\r\n\t\tthis.x = this.parseX(data.columns);\r\n\r\n\t\tthis.totalStart = this.x[0];\r\n\r\n\t\tthis.totalEnd = this.x[this.x.length - 1];\r\n\r\n\t\tthis.parseData(data);\r\n\r\n\t}\r\n\r\n\tget activeLinesCount(){\r\n\r\n\t\tlet count = 0;\r\n\r\n\t\tfor (let lineIndex in this.lines){\r\n\t\t\tcount += this.lines[lineIndex].active ? 1 : 0;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tparseX(columns) {\r\n\t\tfor (let column of columns){\r\n\t\t\tif (column[0] === 'x'){\r\n\t\t\t\tcolumn.shift();\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tcreateLineCoords({id, name, color, coords}){\r\n\t\tthis.lines[`${id}`] = {\r\n\t\t\tname,\r\n\t\t\tcoords,\r\n\t\t\tcolor,\r\n\t\t\tactive: true\r\n\t\t}\r\n\t}\r\n\r\n\tgetCoordsFromColumns({key, columns}){\r\n\r\n\t\tfor(let column of columns){\r\n\r\n\t\t\tif (column[0] === key){\r\n\t\t\t\tcolumn.shift();\r\n\r\n\t\t\t\tthis.totalValues.push(...column);\r\n\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tparseData(data){\r\n\r\n\t\tfor (let columnId in data.types){\r\n\t\t\tif (data.types[columnId] === 'line'){\r\n\t\t\t\tthis.createLineCoords({\r\n\t\t\t\t\tid: columnId,\r\n\t\t\t\t\tname: data.names[columnId],\r\n\t\t\t\t\tcolor: data.colors[columnId],\r\n\t\t\t\t\tcoords: this.getCoordsFromColumns({key: columnId, columns: data.columns})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// remove all not unique values\r\n\t\tthis.totalValues = this.totalValues.filter((v, i, s) => s.indexOf(v) === i);\r\n\r\n\t\tthis.totalValues.sort();\r\n\r\n\t}\r\n\r\n}","export default class ChartDrawier {\r\n\r\n\tconstructor(){\r\n\r\n\t}\r\n\r\n\tcreateSVGItem(target, type, settings){\r\n\r\n\t\tconst item = document.createElementNS('http://www.w3.org/2000/svg', type);\r\n\r\n\t\tfor (const settingName in settings){\r\n\t\t\titem.setAttributeNS(null, settingName, settings[settingName]);\r\n\t\t}\r\n\r\n\t\ttarget.appendChild(item);\r\n\r\n\t\treturn item;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tdrawValues(target, chartValuesMinMax){\r\n\r\n\t\tconst range = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tconst countValuesToDisplay = Math.floor(target.clientHeight / 60);\r\n\r\n\t\tconst stepNotRounded = range / countValuesToDisplay;\r\n\r\n\t\tconst stepOrder = this.convert(stepNotRounded);\r\n\r\n\t\tconst step = Math.floor(stepNotRounded / stepOrder) * stepOrder;\r\n\r\n\t\tconst steps = [];\r\n\r\n\t\tconst currentStepsClasses = [];\r\n\r\n\t\tconst min = (chartValuesMinMax.min > step && chartValuesMinMax.min > 0) ? chartValuesMinMax.min : 0;\r\n\r\n\t\tfor (let i = 0; i <= countValuesToDisplay; i++){\r\n\t\t\tconst value = (step * i) + min;\r\n\t\t\tsteps.push(value);\r\n\t\t\tcurrentStepsClasses.push(`value-${value}`);\r\n\t\t}\r\n\r\n\t\tthis.layout.removeItems('value-item', currentStepsClasses, 'hide');\r\n\r\n\t\tfor (const value of steps){\r\n\r\n\t\t\tconst y = ((((range - (value - chartValuesMinMax.min)) / range) * (this.viewBoxWidth * 0.93))) * (target.clientHeight / target.clientWidth);\r\n\r\n\r\n\t\t\tlet text = target.querySelector(`.value-${value}-value`);\r\n\r\n\t\t\tlet path = target.querySelector(`.value-${value}-text`);\r\n\r\n\t\t\tif (path === null){\r\n\r\n\t\t\t\tpath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke', '#f2f4f5');\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.001);\r\n\t\t\t\tpath.setAttributeNS(null, 'fill', 'none');\r\n\r\n\t\t\t\ttarget.querySelector('.values-wrapper').appendChild(path);\r\n\t\t\t}\r\n\r\n\t\t\tpath.setAttributeNS(null, 'd', `M${0} ${y} L ${this.viewBoxWidth} ${y}`);\r\n\r\n\t\t\tpath.setAttributeNS(null, 'class', `value-item active-item value-${value} value-${value}-value`);\r\n\r\n\t\t\tif (text === null){\r\n\t\t\t\ttext = document.createElementNS('http://www.w3.org/2000/svg','text');\r\n\r\n\t\t\t\ttext.innerHTML = value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n\t\t\t\ttext.setAttribute('x', 0);\r\n\t\t\t\ttarget.querySelector('.values-wrapper').appendChild(text);\r\n\t\t\t}\r\n\r\n\t\t\ttext.setAttribute('y', (y - target.viewBox.baseVal.height * 0.01));\r\n\t\t\ttext.setAttributeNS(null, 'class', `value-item active-item value-${value} value-${value}-text`);\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdrawTooltip(target, {x, values}, clientY = 0){\r\n\r\n\t\tif (this.layout.controlsState.chartMove){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tlet start = this.start + ((this.end - this.start) * (this.layout.startChartValue / this.viewBoxWidth));\r\n\r\n\t\tlet end = this.end - ((this.end - this.start) * (1 - ((this.layout.endChartValue + this.layout.endChartWidth) / this.viewBoxWidth)));\r\n\r\n\r\n\t\tconst xCoord = (1 - ((end - x) / (end - start))) * this.viewBoxWidth;\r\n\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\r\n\t\tconst chartHeight = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tlet tooltipPath = target.querySelector(`.tooltip-${x}`);\r\n\r\n\t\tlet tooltipHTML = ``;\r\n\r\n\t\tlet tooltipText = document.querySelector(`#tooltip-text-${x}`);\r\n\r\n\t\tif (tooltipPath === null){\r\n\r\n\t\t\tthis.layout.removeItems('tooltip-item', `tooltip-${x}`);\r\n\r\n\t\t\tconst monthNames = [\r\n\t\t\t\t\"Dec\", \"Jan\", \"Feb\", \"Mar\",\r\n\t\t\t\t\"Apr\", \"May\", \"Jun\", \"Jul\",\r\n\t\t\t\t\"Aug\", \"Sep\", \"Oct\",\r\n\t\t\t\t\"Nov\"\r\n\t\t\t];\r\n\r\n\t\t\tconst weekdaysNames = [\r\n\t\t\t\t\"Sun\", \"Mon\",\r\n\t\t\t\t\"Tue\", \"Wed\",\r\n\t\t\t\t\"Thu\", \"Fri\",\r\n\t\t\t\t\"Sat\"\r\n\t\t\t];\r\n\r\n\t\t\tconst dateValue = new Date(x);\r\n\r\n\t\t\ttooltipHTML += `<span class=\"tooltip-date\">${weekdaysNames[dateValue.getDay()]}, ${monthNames[dateValue.getMonth()]} ${dateValue.getDate()}</span>`;\r\n\t\t\ttooltipHTML += `<div class=\"tooltip-values-wrapper\">`;\r\n\r\n\t\t\tfor (const chartValue of values){\r\n\r\n\t\t\t\tlet circleValue = target.querySelector(`.tooltip-value-${chartValue.y}`);\r\n\r\n\t\t\t\tconst y = ((((chartHeight - (chartValue.y - chartValuesMinMax.min)) / chartHeight) * (this.viewBoxWidth * 0.93))) * (target.clientHeight / target.clientWidth);\r\n\r\n\t\t\t\tif (circleValue === null){\r\n\r\n\t\t\t\t\tcircleValue = document.createElementNS('http://www.w3.org/2000/svg','circle');\r\n\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'stroke', chartValue.color);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.002);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'fill', '#fff');\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'r', this.viewBoxWidth * 0.007);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'class', `tooltip-${x} tooltip-value-${chartValue.y} tooltip-item`);\r\n\r\n\t\t\t\t\ttarget.querySelector('.tooltip-wrapper').appendChild(circleValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cx', xCoord);\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cy', y);\r\n\t\t\t\ttooltipHTML += `<div class=\"tooltip-value-wrapper\" style=\"color: ${chartValue.color}\">\r\n\t\t\t\t\t<span class=\"tooltip-value\">${[chartValue.y].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")}</span>\r\n\t\t\t\t\t<span class=\"tooltip-value-name\">${chartValue.name}</span>\r\n\t\t\t\t</div>`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttooltipHTML += `</div>`;\r\n\r\n\t\t\tif (tooltipText === null){\r\n\t\t\t\ttooltipText = document.createElement('div');\r\n\t\t\t\ttooltipText.setAttribute('class', `tooltip-text tooltip-${x} tooltip-item`);\r\n\t\t\t\ttooltipText.setAttribute('id', `tooltip-text-${x}`);\r\n\t\t\t\tthis.layout.chartWrapper.appendChild(tooltipText);\r\n\t\t\t}\r\n\r\n\t\t\ttooltipText.innerHTML = tooltipHTML;\r\n\r\n\t\t\ttooltipPath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'stroke', '#96a2aa');\r\n\t\t\ttooltipPath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.001);\r\n\t\t\ttooltipPath.setAttributeNS(null, 'fill', 'none');\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'class', `tooltip-${x} tooltip-item`);\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'd', `M${xCoord} 0 L ${xCoord} ${100}`);\r\n\r\n\t\t\ttarget.querySelector('.tooltip-wrapper').appendChild(tooltipPath);\r\n\r\n\t\t}\r\n\r\n\t\tconst bcrChart = this.layout.chartWindow.getBoundingClientRect();\r\n\t\tconst bcrTooltip = tooltipText.getBoundingClientRect();\r\n\t\tconst bcrCurrentTooltipLine = tooltipPath.getBoundingClientRect();\r\n\t\tconst chartY = clientY - bcrChart.top;\r\n\r\n\r\n\t\tlet left = ((bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width / 2));\r\n\t\tlet top = chartY - (bcrTooltip.height + 15);\r\n\r\n\t\tif (left < 0){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) + 15;\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\r\n\t\t}\r\n\t\tif ((left + bcrTooltip.width) > bcrChart.width){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width + 15);\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\t\t}\r\n\r\n\t\tif (top < 0){\r\n\t\t\ttop = chartY + 15;\r\n\t\t}\r\n\r\n\t\tif ((top + bcrTooltip.height) > (bcrChart.height - (bcrChart.height * 0.09))){\r\n\t\t\ttop = chartY - (bcrTooltip.height + 15);\r\n\t\t}\r\n\r\n\t\ttooltipText.style.top = `${top}px`;\r\n\t\ttooltipText.style.left = `${left}px`;\r\n\r\n\r\n\t}\r\n\r\n\tdrawLines({target, startPercent = 0, endPercent = this.viewBoxWidth, drawValues = false}){\r\n\r\n\t\t// let start = this.start + ((this.end - this.start) * (startPercent / this.viewBoxWidth));\r\n\t\t// let end = this.end - ((this.end - this.start) * (1 - (endPercent / this.viewBoxWidth)));\r\n\r\n\r\n\t\t// const aspectRatioCoeff = target.clientHeight / target.clientWidth;\r\n\r\n\t\t// Disable zoom less than 100%\r\n\t\tstart = this.start > start ? this.start : start;\r\n\t\tend = this.end < end ? this.end : end;\r\n\t\tconst chartWidth = (end - start);\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\t\tconst chartHeight = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tfor (let lineId in this.lines){\r\n\r\n\t\t\tlet pathLine = '';\r\n\r\n\t\t\tconst yCoords = this.lines[lineId].coords;\r\n\r\n\t\t\tfor (let coordIndex in this.x){\r\n\r\n\t\t\t\tcoordIndex = Number(coordIndex);\r\n\t\t\t\tlet x = this.x[coordIndex];\r\n\t\t\t\tlet y = yCoords[coordIndex];\r\n\r\n\t\t\t\tx = (1 - ((end - x) / chartWidth)) * this.viewBoxWidth;\r\n\t\t\t\ty = ((((chartHeight - (y - chartValuesMinMax.min)) / chartHeight) * (this.viewBoxWidth * 0.93))) * aspectRatioCoeff;\r\n\r\n\r\n\t\t\t\tpathLine += (coordIndex === 0) ? `M${x} ${y}` : ` L ${x} ${y}`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet path = target.querySelector(`.line-${lineId}`);\r\n\r\n\t\t\tif (path === null){\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'class': `line-${lineId}`,\r\n\t\t\t\t\t'stroke': this.lines[lineId].color,\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// Create the chart path if it not exists\r\n\t\t\t\tpath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\t\t\t\tpath.setAttributeNS(null, 'class', `line-${lineId}`);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke', this.lines[lineId].color);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.004);\r\n\t\t\t\tpath.setAttributeNS(null, 'fill', 'none');\r\n\t\t\t\ttarget.querySelector('.chart-wrapper').appendChild(path);\r\n\t\t\t}\r\n\t\t\tpath.setAttributeNS(null, 'd', pathLine);\r\n\t\t}\r\n\r\n\t\tif (drawValues){\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.drawDates(target, start, end);\r\n\t\t\t\tthis.drawValues(target, chartValuesMinMax);\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n","import ChartDrawier from './ChartDrawier';\r\n\r\nexport default class ChartTemplate {\r\n\r\n\tconstructor({appendTarget = body, settings}){\r\n\r\n\t\tthis.drawier = new ChartDrawier();\r\n\r\n\t\tthis.layoutID = `chart-layout-${Math.floor(Math.random() * 100000)}`;\r\n\r\n\t\tthis.mainAppendTarget = document.querySelector(appendTarget);\r\n\r\n\t\tthis.layoutContorls = {};\r\n\r\n\t\tthis.settings = settings;\r\n\r\n\t\t// define chart elements (like wrapper, window, map, etc...)\r\n\t\tthis.elements = {};\r\n\r\n\t}\r\n\r\n\tget chartTemplate(){\r\n\t\treturn `\r\n\t\t\t<div class=\"chart\" id=\"${this.layoutID}\">\r\n\t\t\t\t<div class=\"chart__window\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__map\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__buttons\"></div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tget viewBoxWidth(){\r\n\t\treturn this.settings.viewBoxWidth;\r\n\t}\r\n\r\n\tget viewBoxHeight(){\r\n\t\treturn this.settings.viewBoxWidth / this.chartAspectRatio;\r\n\t}\r\n\r\n\tget currentColorScheme(){\r\n\t\tconst mode = this.settings.currentMode;\r\n\t\treturn this.settings[`${mode}Mode`];\r\n\t}\r\n\r\n\tget mapSliderWidth() {\r\n\t\treturn this.settings.mapSliderWidth;\r\n\t}\r\n\r\n\tget startChartValue(){\r\n\t\treturn this.layoutContorls.startChartSlider.x.baseVal.value;\r\n\t}\r\n\tset startChartValue(value){\r\n\t\tthis.layoutContorls.startChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget startChartWidth(){\r\n\t\treturn this.layoutContorls.startChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\tget endChartValue(){\r\n\t\treturn this.layoutContorls.endChartSlider.x.baseVal.value;\r\n\t}\r\n\tset endChartValue(value){\r\n\t\tthis.layoutContorls.endChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget endChartWidth(){\r\n\t\treturn this.layoutContorls.endChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\tget viewRangeWidth(){\r\n\t\treturn (this.endChartValue - this.startChartValue) ;\r\n\t}\r\n\r\n\tget chartAspectRatio(){\r\n\t\treturn this.elements.chartWrapper.clientWidth / this.elements.chartWrapper.clientHeight;\r\n\t}\r\n\r\n\tget mapAspectRatio(){\r\n\t\treturn this.elements.mapWrapper.clientWidth / this.elements.mapWrapper.clientHeight;\r\n\t}\r\n\r\n\t// init all chart template\r\n\tinit(){\r\n\r\n\t\tthis.elements.layout = this.initLayout();\r\n\r\n\t\tthis.elements.chartWrapper = this.elements.layout.querySelector('.chart__window');\r\n\r\n\t\tthis.elements.mapWrapper = this.elements.layout.querySelector('.chart__map');\r\n\r\n\t\tthis.elements.buttonsWrapper = this.elements.layout.querySelector('.chart__buttons');\r\n\r\n\t\tthis.elements.chart = this.initChart();\r\n\r\n\t\tthis.elements.map = this.initMap();\r\n\r\n\t\tthis.setCurrentColorScheme();\r\n\r\n\t}\r\n\r\n\tsetCurrentColorScheme(){\r\n\r\n\t\tthis.elements.map.style.background = this.currentColorScheme.background;\r\n\r\n\t\tthis.elements.chart.style.background = this.currentColorScheme.background;\r\n\r\n\t}\r\n\r\n\tinitLayout(){\r\n\r\n\t\tconst layout = document.createElement('div');\r\n\r\n\t\tlayout.classList.add('chart_wrapper');\r\n\r\n\t\tlayout.innerHTML = this.chartTemplate;\r\n\r\n\t\tthis.mainAppendTarget.append(layout);\r\n\r\n\t\treturn layout;\r\n\r\n\t}\r\n\r\n\tinitChart(){\r\n\r\n\t\tconst chart = this.elements.chartWrapper.querySelector('svg');\r\n\r\n\t\tchart.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth / this.chartAspectRatio}`);\r\n\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'dates-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'values-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'chart-wrapper'});\r\n\t\tthis.drawier.createSVGItem(chart, 'g', {class: 'tooltip-wrapper'});\r\n\r\n\t\treturn chart;\r\n\r\n\t}\r\n\r\n\tinitMap(){\r\n\r\n\t\tconst map = this.elements.mapWrapper.querySelector('svg');\r\n\r\n\t\tmap.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth / this.mapAspectRatio}`);\r\n\r\n\t\tthis.drawier.createSVGItem(map, 'g', {class: 'chart-wrapper'});\r\n\r\n\t\tthis.layoutContorls.viewRange = this.createMapViewRange(map);\r\n\r\n\t\t// init start slider\r\n\t\tthis.layoutContorls.startChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.startChartSlider.setAttributeNS(null, 'x', 0);\r\n\r\n\t\t// init end slider\r\n\t\tthis.layoutContorls.endChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.endChartSlider.setAttributeNS(null, 'x', this.viewBoxWidth - this.endChartWidth);\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\txValueToCoord(x, start, end){\r\n\r\n\t\treturn (1 - ((end - x) / (end - start))) * this.viewBoxWidth;\r\n\r\n\t}\r\n\r\n\tyValueToCoord(y, min, max, target){\r\n\r\n\t\treturn (((max - min) - (y - min)) / (max - min)) * (this.viewBoxWidth * this.settings.chartHeight) / (target.clientWidth / target.clientHeight);\r\n\r\n\t}\r\n\r\n\tcreateLines({target, x, lines, start, end, min, max}){\r\n\r\n\t\tfor (let lineId in lines){\r\n\r\n\t\t\tlet pathLine = '';\r\n\r\n\t\t\tconst yCoords = lines[lineId].coords;\r\n\r\n\t\t\tfor (let coordIndex in x){\r\n\r\n\t\t\t\tcoordIndex = Number(coordIndex);\r\n\r\n\t\t\t\tconst xCoord = this.xValueToCoord(x[coordIndex], start, end);\r\n\t\t\t\tconst yCoord = this.yValueToCoord(yCoords[coordIndex], min, max, target);\r\n\r\n\t\t\t\tpathLine += (coordIndex === 0) ? `M${xCoord} ${yCoord}` : ` L ${xCoord} ${yCoord}`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet path = target.querySelector(`.line-${lineId}`);\r\n\r\n\t\t\tif (path === null){\r\n\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'class': `line-${lineId}`,\r\n\t\t\t\t\t'stroke': lines[lineId].color,\r\n\t\t\t\t\t'stroke-width': this.viewBoxWidth * this.settings.chartLineWidth,\r\n\t\t\t\t\t'fill': 'none'\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create the chart path if it not exists\r\n\t\t\t\tpath = this.drawier.createSVGItem(target.querySelector('.chart-wrapper'), 'path', settings);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpath.setAttributeNS(null, 'd', pathLine);\r\n\t\t}\r\n\t}\r\n\r\n\tcreateDates({target, dates, start, end}){\r\n\r\n\t\tfor (const date of dates){\r\n\r\n\t\t\tconst x = this.xValueToCoord(date, start, end);\r\n\r\n\t\t\t// const shift = (1 - (totalEndDate - date) / (totalEndDate - totalStartDate));\r\n\r\n\t\t\tlet text = target.querySelector(`.date-${date}`);\r\n\r\n\t\t\tif (text === null){\r\n\r\n\t\t\t\tconst settings = {\r\n\t\t\t\t\t'y': this.viewBoxHeight - this.viewBoxHeight * 0.05,\r\n\t\t\t\t\t'x': x,\r\n\t\t\t\t\t'width': this.viewBoxWidth * 0.07,\r\n\t\t\t\t\t'height': this.viewBoxHeight * 0.05,\r\n\t\t\t\t\t'fill': 'none',\r\n\t\t\t\t\t'stroke': 'none'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst wrapper = this.drawier.createSVGItem(target.querySelector('.dates-wrapper'), 'rect', settings);\r\n\r\n\t\t\t\tconst settingsText = {\r\n\t\t\t\t\t'class': 'date-text active-item',\r\n\t\t\t\t\t'x': 0,\r\n\t\t\t\t\t'y': 0\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst text = this.drawier.createSVGItem(wrapper, 'text', settingsText);\r\n\r\n\t\t\t\t// text = document.createElementNS('http://www.w3.org/2000/svg','text');\r\n\r\n\t\t\t\tconst dateValue = new Date(date);\r\n\t\t\t\twrapper.innerHTML = `${this.settings.monthNames[dateValue.getMonth()]} ${dateValue.getDate()}`;\r\n\t\t\t\ttext.setAttribute('y', this.viewBoxHeight);\r\n\t\t\t\ttext.setAttribute('width', `50px`);\r\n\r\n\t\t\t\t// target.querySelector('.dates-wrapper').appendChild(text);\r\n\t\t\t}\r\n\r\n\t\t\t// text.setAttribute('x', x);\r\n\t\t\t// text.setAttributeNS(null, 'class', `date-${date} date-text active-item`);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tcreateSlider(target){\r\n\r\n\t\tconst settings = {\r\n\t\t\t'y'     : 0,\r\n\t\t\t'width' : target.viewBox.baseVal.width * this.mapSliderWidth,\r\n\t\t\t'height': target.viewBox.baseVal.height,\r\n\t\t\t'fill'  : 'rgba(0,0,0,0)'\r\n\t\t};\r\n\r\n\t\tconst chartSlider = this.drawier.createSVGItem(target, 'rect', settings);\r\n\r\n\t\treturn chartSlider;\r\n\t}\r\n\r\n\tcreateMapViewRange(target){\r\n\r\n\t\tconst settings = {\r\n\t\t\t'x'           : 0,\r\n\t\t\t'y'           : 0 - target.viewBox.baseVal.height * (this.mapSliderWidth * 2.5),\r\n\t\t\t'width'       : 0,\r\n\t\t\t'height'      : target.viewBox.baseVal.height + target.viewBox.baseVal.height * (this.mapSliderWidth * 5),\r\n\t\t\t'fill'        : 'rgba(0,0,0,0)',\r\n\t\t\t'stroke'      : this.currentColorScheme.startEndColor,\r\n\t\t\t'stroke-width': this.viewBoxWidth * this.mapSliderWidth\r\n\t\t};\r\n\r\n\t\tconst viewRange = this.drawier.createSVGItem(target, 'rect', settings);\r\n\r\n\t\treturn viewRange;\r\n\t}\r\n\r\n\tinitControlButtons(lines){\r\n\r\n\t\tconst buttons = [];\r\n\r\n\t\tfor (let lineID in lines){\r\n\r\n\t\t\tconst button = document.createElement('button');\r\n\r\n\t\t\tbutton.style.background = lines[lineID].color;\r\n\r\n\t\t\tbutton.innerHTML = lines[lineID].name;\r\n\r\n\t\t\tbutton.dataset.lineid = lineID;\r\n\r\n\t\t\tthis.elements.buttonsWrapper.appendChild(button);\r\n\r\n\t\t\tbuttons.push(button);\r\n\r\n\t\t}\r\n\r\n\t\tthis.elements.buttons = buttons;\r\n\r\n\t}\r\n\r\n\tchangeStartPosition(value){\r\n\r\n\t\tconst maxOfStartPosition = this.endChartValue - this.viewBoxWidth * this.settings.minMapSpace;\r\n\r\n\t\tvalue = value > 0 ? value : 0;\r\n\r\n\t\tvalue = value < maxOfStartPosition ? value : maxOfStartPosition;\r\n\r\n\t\tthis.startChartValue = value;\r\n\r\n\t\tthis.changeMapViewSize();\r\n\t}\r\n\r\n\r\n\r\n\tchangeEndPosition(value){\r\n\r\n\t\tconst minOfEndPosition = this.startChartValue + this.viewBoxWidth * this.settings.minMapSpace;\r\n\r\n\t\tvalue = value > minOfEndPosition ? value : minOfEndPosition;\r\n\r\n\t\tvalue = value + this.endChartWidth < this.viewBoxWidth ? value : this.viewBoxWidth - this.endChartWidth;\r\n\r\n\t\tthis.endChartValue = value;\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t}\r\n\r\n\tchangeMapViewSize(){\r\n\r\n\t\tconst left = this.startChartValue + (this.viewBoxWidth * (this.mapSliderWidth / 2));\r\n\r\n\t\tconst width = this.viewRangeWidth;\r\n\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'x', left);\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'width', width);\r\n\t}\r\n\r\n\r\n\tinitTooltip(event){\r\n\r\n\t\tconst coordIndex = this.getCoordIndexByClientX(event.clientX);\r\n\r\n\t\tconst coords = this.getCoordsByIndex(coordIndex);\r\n\r\n\t\tif(coords){\r\n\t\t\tthis.drawier.drawTooltip(this.chartWindow, coords, event.clientY);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveItems(removingClass, drawingID = 'id-of-item-to-not-remove', action = 'remove'){\r\n\r\n\t\tlet checkToNotRemove = [];\r\n\r\n\t\tif (typeof drawingID === 'string'){\r\n\t\t\tcheckToNotRemove.push(drawingID);\r\n\t\t}else if(Array.isArray(drawingID)){\r\n\t\t\tcheckToNotRemove = drawingID;\r\n\t\t}else{\r\n\t\t\treject('Wrong value of Drawing ID');\r\n\t\t}\r\n\r\n\t\tlet items = this.elements.layout.getElementsByClassName(removingClass);\r\n\r\n\t\tif (this.removeItem(items, checkToNotRemove, items.length, action)){\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tremoveItem(items, checkToNotRemove, countToRemove, action){\r\n\r\n\t\tfor (const item of items){\r\n\t\t\tlet found = 0;\r\n\t\t\tfor (const checkID of checkToNotRemove){\r\n\t\t\t\tfound += item.classList.contains(checkID) ? 1 : 0;\r\n\t\t\t}\r\n\t\t\tif (found === 0){\r\n\t\t\t\tswitch (action){\r\n\t\t\t\t\tcase 'remove':\r\n\t\t\t\t\t\titem.remove();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'hide':\r\n\t\t\t\t\t\titem.classList.remove('active-item');\r\n\t\t\t\t\t\titem.classList.add('removing-item');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcountToRemove--;\r\n\t\t\t}else{\r\n\t\t\t\tcountToRemove--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (countToRemove !== 0){\r\n\t\t\treturn this.removeItem(items, checkToNotRemove, countToRemove, action);\r\n\t\t}else{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n}","import chartData from '../data/chart_data';\r\nimport ChartController from './ChartController';\r\n\r\n\r\nclass Chart1 {\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.data = new ChartData(data);\r\n\r\n\t\tthis.layout = new ChartTemplate({\r\n\t\t\tchart: this\r\n\t\t});\r\n\r\n\t\tthis.layout.init();\r\n\r\n\t\tthis.displayedDates = [];\r\n\r\n\t\tthis.displayedValues = [];\r\n\r\n\r\n\t}\r\n\r\n\tgetChartMinMaxValueInRange(start, end){\r\n\r\n\t\tlet min = 99999999999999999;\r\n\t\tlet max = 0;\r\n\r\n\t\tif (this.data.activeLinesCount === 0){\r\n\t\t\t// Prevent the not smooth animation on disable last chart\r\n\t\t\treturn {min: 0, max: this.viewBoxWidth};\r\n\t\t}\r\n\r\n\t\tfor (let coordIndex in this.x){\r\n\t\t\tif (this.x[coordIndex] >= start && this.x[coordIndex] <= end){\r\n\t\t\t\tfor (let lineIndex in this.lines){\r\n\t\t\t\t\tconst line = this.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t\tmax = line.coords[coordIndex] > max ? line.coords[coordIndex] : max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor (let lineIndex in this.lines){\r\n\t\t\t\t\tconst line = this.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst range = max - min;\r\n\r\n\t\tmax += range * 0.05;\r\n\r\n\t\tif (min > 0 && (min - range * 0.05) < 0){\r\n\t\t\tmin = 0;\r\n\t\t}else{\r\n\t\t\tmin -= range * 0.05;\r\n\t\t\tmin = Math.floor(min / this.convert(min)) * this.convert(min);\r\n\t\t}\r\n\r\n\t\treturn {min, max};\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// get order of magnitude\r\n\tgetOOM(n) {\r\n\t\tif (Math.abs(n) > 0){\r\n\t\t\tconst order = Math.floor(Math.log(Math.abs(n)) / Math.LN10 + 0.000000001);\r\n\t\t\treturn Math.pow(10,order);\r\n\t\t}else{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tdrawDates(target, start, end){\r\n\r\n\t\tconst monthNames = [\r\n\t\t\t\"Dec\", \"Jan\", \"Feb\", \"Mar\",\r\n\t\t\t\"Apr\", \"May\", \"Jun\", \"Jul\",\r\n\t\t\t\"Aug\", \"Sep\", \"Oct\",\r\n\t\t\t\"Nov\"\r\n\t\t];\r\n\r\n\r\n\t\tconst range = this.x.slice();\r\n\t\tconst totalStartDate = range.shift();\r\n\t\tconst totalEndDate = range.pop();\r\n\r\n\r\n\t\tif (!this.layout.controlsState.mapRangeClicked){\r\n\r\n\t\t\tconst windowWidthDrawsCount = Math.floor((target.getBoundingClientRect().width) / 80);\r\n\r\n\t\t\tlet myltiple = Math.floor((target.querySelector('.chart-wrapper').getBoundingClientRect().width / target.getBoundingClientRect().width) * 1.3);\r\n\r\n\r\n\t\t\tmyltiple = Math.pow(2, Math.floor(Math.log2(myltiple)));\r\n\r\n\t\t\tconst totalDrawsCount = windowWidthDrawsCount * myltiple;\r\n\r\n\t\t\tconst step = Math.floor((totalEndDate - totalStartDate) / totalDrawsCount);\r\n\r\n\t\t\tthis.displayedDates = [];\r\n\r\n\t\t\tconst currentDatesClasses = [];\r\n\r\n\t\t\tfor (let i = 0; i <= totalDrawsCount; i++){\r\n\t\t\t\tconst dateValue = Math.floor((totalStartDate + (step * i)) / 86400000) * 86400000;\r\n\t\t\t\tcurrentDatesClasses.push(`date-${dateValue}`);\r\n\t\t\t\tthis.displayedDates.push(dateValue);\r\n\t\t\t}\r\n\r\n\t\t\tthis.displayedDates.push(Math.floor((totalEndDate) / 86400000) * 86400000);\r\n\r\n\t\t\tthis.layout.removeItems('date-text', currentDatesClasses, 'hide');\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfor (const date of this.displayedDates){\r\n\r\n\t\t\tconst x = (1 - ((end - date) / (end - start))) * this.viewBoxWidth;\r\n\r\n\t\t\tconst shift = (1 - (totalEndDate - date) / (totalEndDate - totalStartDate));\r\n\r\n\t\t\tlet text = target.querySelector(`.date-${date}`);\r\n\r\n\t\t\tif (text === null){\r\n\t\t\t\ttext = document.createElementNS('http://www.w3.org/2000/svg','text');\r\n\r\n\t\t\t\tconst dateValue = new Date(date);\r\n\t\t\t\ttext.innerHTML = `${monthNames[dateValue.getMonth()]} ${dateValue.getDate()}`;\r\n\t\t\t\ttext.setAttribute('y', this.viewBoxWidth * (target.clientHeight / target.clientWidth));\r\n\t\t\t\ttext.setAttribute('width', `50px`);\r\n\r\n\t\t\t\ttext.dataset.date = date;\r\n\r\n\t\t\t\ttarget.querySelector('.dates-wrapper').appendChild(text);\r\n\t\t\t}\r\n\r\n\t\t\ttext.setAttribute('x', x - (shift * text.getBoundingClientRect().width * (this.viewBoxWidth / this.layout.chartWindow.clientWidth)));\r\n\t\t\ttext.setAttributeNS(null, 'class', `date-${date} date-text active-item`);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdrawValues(target, chartValuesMinMax){\r\n\r\n\t\tconst range = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tconst countValuesToDisplay = Math.floor(target.clientHeight / 60);\r\n\r\n\t\tconst stepNotRounded = range / countValuesToDisplay;\r\n\r\n\t\tconst stepOrder = this.convert(stepNotRounded);\r\n\r\n\t\tconst step = Math.floor(stepNotRounded / stepOrder) * stepOrder;\r\n\r\n\t\tconst steps = [];\r\n\r\n\t\tconst currentStepsClasses = [];\r\n\r\n\t\tconst min = (chartValuesMinMax.min > step && chartValuesMinMax.min > 0) ? chartValuesMinMax.min : 0;\r\n\r\n\t\tfor (let i = 0; i <= countValuesToDisplay; i++){\r\n\t\t\tconst value = (step * i) + min;\r\n\t\t\tsteps.push(value);\r\n\t\t\tcurrentStepsClasses.push(`value-${value}`);\r\n\t\t}\r\n\r\n\t\tthis.layout.removeItems('value-item', currentStepsClasses, 'hide');\r\n\r\n\t\tfor (const value of steps){\r\n\r\n\t\t\tconst y = ((((range - (value - chartValuesMinMax.min)) / range) * (this.viewBoxWidth * 0.93))) * (target.clientHeight / target.clientWidth);\r\n\r\n\r\n\t\t\tlet text = target.querySelector(`.value-${value}-value`);\r\n\r\n\t\t\tlet path = target.querySelector(`.value-${value}-text`);\r\n\r\n\t\t\tif (path === null){\r\n\r\n\t\t\t\tpath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke', '#f2f4f5');\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.001);\r\n\t\t\t\tpath.setAttributeNS(null, 'fill', 'none');\r\n\r\n\t\t\t\ttarget.querySelector('.values-wrapper').appendChild(path);\r\n\t\t\t}\r\n\r\n\t\t\tpath.setAttributeNS(null, 'd', `M${0} ${y} L ${this.viewBoxWidth} ${y}`);\r\n\t\t\tpath.setAttributeNS(null, 'class', `value-item active-item value-${value} value-${value}-value`);\r\n\r\n\t\t\tif (text === null){\r\n\t\t\t\ttext = document.createElementNS('http://www.w3.org/2000/svg','text');\r\n\r\n\t\t\t\ttext.innerHTML = value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n\t\t\t\ttext.setAttribute('x', 0);\r\n\t\t\t\ttarget.querySelector('.values-wrapper').appendChild(text);\r\n\t\t\t}\r\n\r\n\t\t\ttext.setAttribute('y', (y - target.viewBox.baseVal.height * 0.01));\r\n\t\t\ttext.setAttributeNS(null, 'class', `value-item active-item value-${value} value-${value}-text`);\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdrawTooltip(target, {x, values}, clientY = 0){\r\n\r\n\t\tif (this.layout.controlsState.chartMove){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tlet start = this.start + ((this.end - this.start) * (this.layout.startChartValue / this.viewBoxWidth));\r\n\r\n\t\tlet end = this.end - ((this.end - this.start) * (1 - ((this.layout.endChartValue + this.layout.endChartWidth) / this.viewBoxWidth)));\r\n\r\n\r\n\t\tconst xCoord = (1 - ((end - x) / (end - start))) * this.viewBoxWidth;\r\n\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\r\n\t\tconst chartHeight = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tlet tooltipPath = target.querySelector(`.tooltip-${x}`);\r\n\r\n\t\tlet tooltipHTML = ``;\r\n\r\n\t\tlet tooltipText = document.querySelector(`#tooltip-text-${x}`);\r\n\r\n\t\tif (tooltipPath === null){\r\n\r\n\t\t\tthis.layout.removeItems('tooltip-item', `tooltip-${x}`);\r\n\r\n\t\t\tconst monthNames = [\r\n\t\t\t\t\"Dec\", \"Jan\", \"Feb\", \"Mar\",\r\n\t\t\t\t\"Apr\", \"May\", \"Jun\", \"Jul\",\r\n\t\t\t\t\"Aug\", \"Sep\", \"Oct\",\r\n\t\t\t\t\"Nov\"\r\n\t\t\t];\r\n\r\n\t\t\tconst weekdaysNames = [\r\n\t\t\t\t\"Sun\", \"Mon\",\r\n\t\t\t\t\"Tue\", \"Wed\",\r\n\t\t\t\t\"Thu\", \"Fri\",\r\n\t\t\t\t\"Sat\"\r\n\t\t\t];\r\n\r\n\t\t\tconst dateValue = new Date(x);\r\n\r\n\r\n\r\n\t\t\ttooltipHTML += `<span class=\"tooltip-date\">${weekdaysNames[dateValue.getDay()]}, ${monthNames[dateValue.getMonth()]} ${dateValue.getDate()}</span>`;\r\n\t\t\ttooltipHTML += `<div class=\"tooltip-values-wrapper\">`;\r\n\r\n\t\t\tfor (const chartValue of values){\r\n\r\n\t\t\t\tlet circleValue = target.querySelector(`.tooltip-value-${chartValue.y}`);\r\n\r\n\t\t\t\tconst y = ((((chartHeight - (chartValue.y - chartValuesMinMax.min)) / chartHeight) * (this.viewBoxWidth * 0.93))) * (target.clientHeight / target.clientWidth);\r\n\r\n\t\t\t\tif (circleValue === null){\r\n\r\n\t\t\t\t\tcircleValue = document.createElementNS('http://www.w3.org/2000/svg','circle');\r\n\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'stroke', chartValue.color);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.002);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'fill', '#fff');\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'r', this.viewBoxWidth * 0.007);\r\n\t\t\t\t\tcircleValue.setAttributeNS(null, 'class', `tooltip-${x} tooltip-value-${chartValue.y} tooltip-item`);\r\n\r\n\t\t\t\t\ttarget.querySelector('.tooltip-wrapper').appendChild(circleValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cx', xCoord);\r\n\t\t\t\tcircleValue.setAttributeNS(null, 'cy', y);\r\n\t\t\t\ttooltipHTML += `<div class=\"tooltip-value-wrapper\" style=\"color: ${chartValue.color}\">\r\n\t\t\t\t\t<span class=\"tooltip-value\">${[chartValue.y].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")}</span>\r\n\t\t\t\t\t<span class=\"tooltip-value-name\">${chartValue.name}</span>\r\n\t\t\t\t</div>`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttooltipHTML += `</div>`;\r\n\r\n\t\t\tif (tooltipText === null){\r\n\t\t\t\ttooltipText = document.createElement('div');\r\n\t\t\t\ttooltipText.setAttribute('class', `tooltip-text tooltip-${x} tooltip-item`);\r\n\t\t\t\ttooltipText.setAttribute('id', `tooltip-text-${x}`);\r\n\t\t\t\tthis.layout.chartWrapper.appendChild(tooltipText);\r\n\t\t\t}\r\n\r\n\t\t\ttooltipText.innerHTML = tooltipHTML;\r\n\r\n\t\t\ttooltipPath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'stroke', '#96a2aa');\r\n\t\t\ttooltipPath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.001);\r\n\t\t\ttooltipPath.setAttributeNS(null, 'fill', 'none');\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'class', `tooltip-${x} tooltip-item`);\r\n\r\n\t\t\ttooltipPath.setAttributeNS(null, 'd', `M${xCoord} 0 L ${xCoord} ${100}`);\r\n\r\n\t\t\ttarget.querySelector('.tooltip-wrapper').appendChild(tooltipPath);\r\n\r\n\t\t}\r\n\r\n\t\tconst bcrChart = this.layout.chartWindow.getBoundingClientRect();\r\n\t\tconst bcrTooltip = tooltipText.getBoundingClientRect();\r\n\t\tconst bcrCurrentTooltipLine = tooltipPath.getBoundingClientRect();\r\n\t\tconst chartY = clientY - bcrChart.top;\r\n\r\n\r\n\t\tlet left = ((bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width / 2));\r\n\t\tlet top = chartY - (bcrTooltip.height + 15);\r\n\r\n\t\tif (left < 0){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) + 15;\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\r\n\t\t}\r\n\t\tif ((left + bcrTooltip.width) > bcrChart.width){\r\n\t\t\tleft = (bcrCurrentTooltipLine.left - bcrChart.left) - (bcrTooltip.width + 15);\r\n\t\t\ttop = chartY - (bcrTooltip.height / 2);\r\n\t\t}\r\n\r\n\t\tif (top < 0){\r\n\t\t\ttop = chartY + 15;\r\n\t\t}\r\n\r\n\t\tif ((top + bcrTooltip.height) > (bcrChart.height - (bcrChart.height * 0.09))){\r\n\t\t\ttop = chartY - (bcrTooltip.height + 15);\r\n\t\t}\r\n\r\n\t\ttooltipText.style.top = `${top}px`;\r\n\t\ttooltipText.style.left = `${left}px`;\r\n\r\n\r\n\t}\r\n\r\n\tdrawLines({target, startPercent = 0, endPercent = this.viewBoxWidth, drawValues = false}){\r\n\r\n\t\tlet start = this.start + ((this.end - this.start) * (startPercent / this.viewBoxWidth));\r\n\t\tlet end = this.end - ((this.end - this.start) * (1 - (endPercent / this.viewBoxWidth)));\r\n\r\n\r\n\t\tconst aspectRatioCoeff = target.clientHeight / target.clientWidth;\r\n\r\n\t\ttarget.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth * aspectRatioCoeff}`);\r\n\r\n\t\t// Disable zoom less than 100%\r\n\t\tstart = this.start > start ? this.start : start;\r\n\t\tend = this.end < end ? this.end : end;\r\n\t\tconst chartWidth = (end - start);\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\t\tconst chartHeight = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tfor (let lineId in this.lines){\r\n\r\n\t\t\tlet pathLine = '';\r\n\r\n\t\t\tconst yCoords = this.lines[lineId].coords;\r\n\r\n\t\t\tfor (let coordIndex in this.x){\r\n\r\n\t\t\t\tcoordIndex = Number(coordIndex);\r\n\t\t\t\tlet x = this.x[coordIndex];\r\n\t\t\t\tlet y = yCoords[coordIndex];\r\n\r\n\t\t\t\tx = (1 - ((end - x) / chartWidth)) * this.viewBoxWidth;\r\n\t\t\t\ty = ((((chartHeight - (y - chartValuesMinMax.min)) / chartHeight) * (this.viewBoxWidth * 0.93))) * aspectRatioCoeff;\r\n\r\n\r\n\t\t\t\tpathLine += (coordIndex === 0) ? `M${x} ${y}` : ` L ${x} ${y}`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet path = target.querySelector(`.line-${lineId}`);\r\n\r\n\t\t\tif (path === null){\r\n\t\t\t\t// Create the chart path if it not exists\r\n\t\t\t\tpath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\t\t\t\tpath.setAttributeNS(null, 'class', `line-${lineId}`);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke', this.lines[lineId].color);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.004);\r\n\t\t\t\tpath.setAttributeNS(null, 'fill', 'none');\r\n\t\t\t\ttarget.querySelector('.chart-wrapper').appendChild(path);\r\n\t\t\t}\r\n\t\t\tpath.setAttributeNS(null, 'd', pathLine);\r\n\t\t}\r\n\r\n\t\tif (drawValues){\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.drawDates(target, start, end);\r\n\t\t\t\tthis.drawValues(target, chartValuesMinMax);\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass Chart {\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.chart = new ChartController(data);\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n// new ChartController(chartData[0]);\r\nnew Chart(chartData[0]);\r\n// new Chart(chartData[1]);\r\n// new Chart(chartData[2]);\r\n// new Chart(chartData[3]);\r\n// new Chart(chartData[4]);\r\n// new Chart(chartData[1]);\r\n// new Chart(chartData[2]);\r\n// new Chart(chartData[3]);\r\n// new Chart(chartData[4]);","// extracted by mini-css-extract-plugin"],"sourceRoot":""}