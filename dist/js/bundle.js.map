{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/script.js","webpack:///./src/scss/style.scss"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA2C;;;;AAI3C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;;AAGA,mBAAmB,wBAAwB;AAC3C,gBAAgB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;;AAEpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qCAAqC;AAC7E,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA,YAAY,6EAA6E;;;AAGzF;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,yCAAyC,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE;;AAEjE;;AAEA,4CAA4C,OAAO;;AAEnD;AACA;AACA;AACA,0CAA0C,kBAAkB,GAAG,qCAAqC;AACpG,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,cAAc,6BAA6B;;AAE3C;;AAEA,kCAAkC,mCAAmC;;AAErE;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wBAAwB,YAAY;;AAEpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB,sCAAsC;;AAE9D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,mDAAmD;AAC7E;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,UAAU,6CAAS,K;;;;;;;;;;;AC3fnB,uC","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import chartData from '../data/chart_data';\r\n\r\n\r\n\r\nclass Chart {\r\n\r\n\tconstructor(data){\r\n\r\n\t\tthis.lines = {};\r\n\r\n\t\tthis.x = this.createX(data.columns);\r\n\r\n\t\tthis.start = this.x[0];\r\n\r\n\t\tthis.end = this.x[this.x.length - 1];\r\n\r\n\t\tthis.viewBoxWidth = 100;\r\n\r\n\t\tthis.parseData(data);\r\n\r\n\t\tthis.layout = new ChartTemplate({\r\n\t\t\tchart: this\r\n\t\t});\r\n\r\n\t\tthis.layout.init();\r\n\r\n\t}\r\n\r\n\r\n\tcreateLineCoords({id, name, color, coords}){\r\n\t\tthis.lines[`${id}`] = {\r\n\t\t\tname,\r\n\t\t\tcoords,\r\n\t\t\tcolor,\r\n\t\t\tactive: true\r\n\t\t}\r\n\t}\r\n\r\n\tcreateX(columns) {\r\n\t\tfor (let column of columns){\r\n\t\t\tif (column[0] === 'x'){\r\n\t\t\t\tcolumn.shift();\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tgetCoordsFromColumns({key, columns}){\r\n\r\n\t\tfor(let column of columns){\r\n\t\t\tif (column[0] === key){\r\n\t\t\t\tcolumn.shift();\r\n\r\n\t\t\t\tconst coords = [];\r\n\r\n\t\t\t\tfor (let coord_index in this.x){\r\n\t\t\t\t\tcoords.push({\r\n\t\t\t\t\t\tx: this.x[coord_index],\r\n\t\t\t\t\t\ty: column[coord_index]\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn column;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tparseData(data){\r\n\t\tfor (let columnId in data.types){\r\n\t\t\tif (data.types[columnId] === 'line'){\r\n\t\t\t\tthis.createLineCoords({\r\n\t\t\t\t\tid: columnId,\r\n\t\t\t\t\tname: data.names[columnId],\r\n\t\t\t\t\tcolor: data.colors[columnId],\r\n\t\t\t\t\tcoords: this.getCoordsFromColumns({key: columnId, columns: data.columns})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetChartMinMaxValueInRange(start, end){\r\n\r\n\t\tlet min = 99999999999999999;\r\n\t\tlet max = 0;\r\n\r\n\t\tif (this.getActiveLinesCount() === 0){\r\n\t\t\t// Prevent the not smooth animation on disable last chart\r\n\t\t\treturn {min: 0, max: this.viewBoxWidth};\r\n\t\t}\r\n\r\n\t\tfor (let coordIndex in this.x){\r\n\t\t\tif (this.x[coordIndex] >= start && this.x[coordIndex] <= end){\r\n\t\t\t\tfor (let lineIndex in this.lines){\r\n\t\t\t\t\tconst line = this.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t\tmax = line.coords[coordIndex] > max ? line.coords[coordIndex] : max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor (let lineIndex in this.lines){\r\n\t\t\t\t\tconst line = this.lines[lineIndex];\r\n\t\t\t\t\tif (line.active){\r\n\t\t\t\t\t\tmin = line.coords[coordIndex] < min ? line.coords[coordIndex] : min;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {min, max};\r\n\t}\r\n\r\n\tgetActiveLinesCount(){\r\n\r\n\t\tlet count = 0;\r\n\r\n\t\tfor (let lineIndex in this.lines){\r\n\t\t\tcount += this.lines[lineIndex].active ? 1 : 0;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\r\n\tdrawDate(target, start, end){\r\n\r\n\t\tconst range = [];\r\n\t\tconst drawingDates = [];\r\n\t\tconst countOfdates = Math.floor(target.clientWidth / 100);\r\n\r\n\r\n\t\tfor (const index in this.x){\r\n\t\t\tif (this.x[index] >= start && this.x[index] <= end){\r\n\t\t\t\trange.push(this.x[index]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst removeFromStart = Math.ceil((range.length % countOfdates) / 2);\r\n\t\tconst removeFromEnd = Math.floor((range.length % countOfdates) / 2);\r\n\r\n\r\n\t\trange.splice(range.length - removeFromEnd);\r\n\r\n\t\trange.splice(0, removeFromStart);\r\n\r\n\t\trange = range.filter(() => {\r\n\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tdrawValue(){\r\n\r\n\t}\r\n\r\n\tdrawLines({target, startPercent = 0, endPercent = this.viewBoxWidth, drawValues = false}){\r\n\r\n\r\n\t\tlet start = this.start + ((this.end - this.start) * (startPercent / this.viewBoxWidth));\r\n\t\tlet end = this.end - ((this.end - this.start) * (1 - (endPercent / this.viewBoxWidth)));\r\n\r\n\t\tif (drawValues){\r\n\t\t\tthis.drawDate(target, start, end);\r\n\t\t}\r\n\r\n\r\n\t\tconst aspectRatioCoeff = target.clientHeight / target.clientWidth;\r\n\r\n\t\t// Disable zoom less than 100%\r\n\t\tstart = this.start > start ? this.start : start;\r\n\t\tend = this.end < end ? this.end : end;\r\n\t\tconst chartWidth = (end - start);\r\n\r\n\t\tconst chartValuesMinMax = this.getChartMinMaxValueInRange(start, end);\r\n\t\tconst chartHeight = chartValuesMinMax.max - chartValuesMinMax.min;\r\n\r\n\t\tfor (let lineId in this.lines){\r\n\r\n\t\t\tlet pathLine = '';\r\n\r\n\t\t\tconst yCoords = this.lines[lineId].coords;\r\n\r\n\t\t\tfor (let coordIndex in this.x){\r\n\t\t\t\tcoordIndex = Number(coordIndex);\r\n\t\t\t\tlet x = this.x[coordIndex];\r\n\t\t\t\tlet y = yCoords[coordIndex];\r\n\r\n\t\t\t\tx = (1 - ((end - x) / chartWidth)) * this.viewBoxWidth;\r\n\t\t\t\ty = ((((chartHeight - (y - chartValuesMinMax.min)) / chartHeight) * (this.viewBoxWidth * 0.8)) + this.viewBoxWidth * 0.15) * aspectRatioCoeff;\r\n\r\n\r\n\t\t\t\tpathLine += (coordIndex === 0) ? `M${x} ${y}` : ` L ${x} ${y}`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet path = target.querySelector(`.line-${lineId}`);\r\n\r\n\t\t\tif (path === null){\r\n\t\t\t\t// Create the chart path if it not exists\r\n\t\t\t\tpath = document.createElementNS('http://www.w3.org/2000/svg','path');\r\n\t\t\t\ttarget.setAttribute('viewBox', `0 0 ${this.viewBoxWidth} ${this.viewBoxWidth * aspectRatioCoeff}`);\r\n\t\t\t\tpath.setAttributeNS(null, 'class', `line-${lineId}`);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke', this.lines[lineId].color);\r\n\t\t\t\tpath.setAttributeNS(null, 'stroke-width', this.viewBoxWidth * 0.004);\r\n\t\t\t\tpath.setAttributeNS(null, 'fill', 'none');\r\n\t\t\t\ttarget.appendChild(path);\r\n\t\t\t}\r\n\t\t\tpath.setAttributeNS(null, 'd', pathLine);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nclass ChartTemplate {\r\n\r\n\tconstructor({chart, appendTarget = 'body'}){\r\n\r\n\t\tthis.chart = chart;\r\n\r\n\t\tthis.layoutID = `chart-layout-${Math.floor(Math.random() * 100000)}`;\r\n\r\n\t\tthis.appendTarget = document.querySelector(appendTarget);\r\n\r\n\t\tthis.layout;\r\n\r\n\t\tthis.layoutContorls = {};\r\n\r\n\t\tthis.controlsState = {\r\n\t\t\tstartClicked        : false,\r\n\t\t\tendClicked          : false,\r\n\t\t\tmapRangeClicked     : false,\r\n\t\t\tchartMove           : false,\r\n\t\t\tchartReverceMove    : false,\r\n\t\t\tstartPosition       : 0,\r\n\t\t\tendPosition         : this.chart.viewBoxWidth,\r\n\t\t\tclickInitialPosition: 0\r\n\t\t};\r\n\r\n\t\tthis.chartWindow, this.mapWindow;\r\n\t}\r\n\r\n\tget chartTemplate(){\r\n\t\treturn `\r\n\t\t\t<div class=\"chart\" id=\"${this.layoutID}\">\r\n\t\t\t\t<div class=\"chart__window\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__map\">\r\n\t\t\t\t\t<svg></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"chart__buttons\"></div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tinit(){\r\n\r\n\t\tthis.layout = this.initLayout();\r\n\r\n\t\tthis.chartWindow = this.initChartWindow();\r\n\r\n\t\tthis.map = this.initMap();\r\n\r\n\t\tthis.initControlButtons();\r\n\r\n\t}\r\n\r\n\tinitMap(){\r\n\r\n\t\tconst map = this.layout.querySelector('.chart__map svg');\r\n\r\n\t\tthis.chart.drawLines({target: map});\r\n\r\n\t\tthis.layoutContorls.viewRange = this.createMapViewRange(map);\r\n\r\n\t\tthis.layoutContorls.startChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.startChartSlider.setAttributeNS(null, 'x', this.controlsState.startPosition);\r\n\t\tthis.layoutContorls.startChartSlider.addEventListener('mousedown', () => this.controlsState.startClicked = true);\r\n\r\n\t\tthis.layoutContorls.endChartSlider = this.createSlider(map);\r\n\t\tthis.layoutContorls.endChartSlider.setAttributeNS(null, 'x', this.controlsState.endPosition - this.endChartWidth);\r\n\t\tthis.layoutContorls.endChartSlider.addEventListener('mousedown', () => this.controlsState.endClicked = true);\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t\tthis.clearConsrolState();\r\n\r\n\t\treturn map;\r\n\t}\r\n\r\n\tcreateSlider(map){\r\n\t\tconst chartSlider = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n\t\tchartSlider.setAttributeNS(null, 'y', 0);\r\n\t\tchartSlider.setAttributeNS(null, 'width', map.viewBox.baseVal.width * 0.02);\r\n\t\tchartSlider.setAttributeNS(null, 'height', map.viewBox.baseVal.height);\r\n\t\tchartSlider.setAttributeNS(null, 'fill', 'rgba(0,0,0,0)');\r\n\t\tchartSlider.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t});\r\n\r\n\t\tmap.appendChild(chartSlider);\r\n\t\treturn chartSlider;\r\n\t}\r\n\r\n\tcreateMapViewRange(map){\r\n\t\tconst viewRange = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n\r\n\t\tviewRange.setAttributeNS(null, 'y', 0 - map.viewBox.baseVal.height * 0.05);\r\n\t\tviewRange.setAttributeNS(null, 'x', 0);\r\n\t\tviewRange.setAttributeNS(null, 'width', 0);\r\n\t\tviewRange.setAttributeNS(null, 'height', map.viewBox.baseVal.height * 1.1);\r\n\t\tviewRange.setAttributeNS(null, 'fill', 'rgba(0,0,0,0)');\r\n\t\tviewRange.setAttributeNS(null, 'stroke', 'rgba(0,0,0,0.5)');\r\n\t\tviewRange.setAttributeNS(null, 'stroke-width', this.chart.viewBoxWidth * 0.02);\r\n\t\tviewRange.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\t\tmap.appendChild(viewRange);\r\n\t\treturn viewRange;\r\n\t}\r\n\r\n\tinitChartWindow(){\r\n\r\n\t\tconst chartWindow = this.layout.querySelector('.chart__window svg');\r\n\r\n\t\tchartWindow.addEventListener('mousedown', event => {\r\n\t\t\tthis.controlsState.clickInitialPosition = event.clientX;\r\n\t\t\tthis.controlsState.mapRangeClicked      = true;\r\n\t\t\tthis.controlsState.chartMove            = true;\r\n\t\t\tthis.controlsState.chartReverceMove     = true;\r\n\t\t\tthis.controlsState.minMapViewRange      = this.viewRangeWidth;\r\n\t\t});\r\n\r\n\t\tthis.chart.drawLines({target: chartWindow, drawValues: true});\r\n\r\n\t\treturn chartWindow;\r\n\r\n\t}\r\n\r\n\tget startChartValue(){\r\n\t\treturn this.layoutContorls.startChartSlider.x.baseVal.value;\r\n\t}\r\n\tset startChartValue(value){\r\n\t\tthis.layoutContorls.startChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget startChartWidth(){\r\n\t\treturn this.layoutContorls.startChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\r\n\r\n\tget endChartValue(){\r\n\t\treturn this.layoutContorls.endChartSlider.x.baseVal.value;\r\n\t}\r\n\tset endChartValue(value){\r\n\t\tthis.layoutContorls.endChartSlider.x.baseVal.value = value;\r\n\t}\r\n\tget endChartWidth(){\r\n\t\treturn this.layoutContorls.endChartSlider.width.baseVal.value;\r\n\t}\r\n\r\n\r\n\r\n\tget viewRangeWidth(){\r\n\t\treturn (this.endChartValue - this.startChartValue) ;\r\n\t}\r\n\r\n\tinitControlButtons(){\r\n\t\tfor (let line_id in this.chart.lines){\r\n\r\n\t\t\tconst button = document.createElement('button');\r\n\t\t\tbutton.style.background = this.chart.lines[line_id].color;\r\n\t\t\tbutton.innerHTML = this.chart.lines[line_id].name;\r\n\r\n\t\t\tbutton.addEventListener('click', () => {\r\n\t\t\t\tconst line = this.chartWindow.querySelector(`.line-${line_id}`);\r\n\t\t\t\tif (this.chart.lines[line_id].active){\r\n\t\t\t\t\tthis.chart.lines[line_id].active = false;\r\n\t\t\t\t\tline.style.opacity = 0;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.chart.lines[line_id].active = true;\r\n\t\t\t\t\tline.style.opacity = 1;\r\n\t\t\t\t}\r\n\t\t\t\tthis.chart.drawLines({\r\n\t\t\t\t\ttarget: this.chartWindow,\r\n\t\t\t\t\tstartPercent: this.startChartValue,\r\n\t\t\t\t\tendPercent: this.endChartValue + this.endChartWidth,\r\n\t\t\t\t\tdrawValues: true\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tthis.layout.querySelector('.chart__buttons').appendChild(button);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tchangeStartPosition(value){\r\n\r\n\t\tconst maxOfStartPosition = this.endChartValue - this.controlsState.minMapViewRange;\r\n\r\n\t\tvalue = value > 0 ? value : 0;\r\n\t\tvalue = value < maxOfStartPosition ? value : maxOfStartPosition;\r\n\r\n\t\tthis.startChartValue = value;\r\n\r\n\t\tthis.changeMapViewSize();\r\n\t}\r\n\r\n\tchangeEndPosition(value){\r\n\r\n\t\tconst minOfEndPosition = this.startChartValue + this.controlsState.minMapViewRange;\r\n\r\n\t\tvalue = value > minOfEndPosition ? value : minOfEndPosition;\r\n\t\tvalue = value + this.endChartWidth < this.chart.viewBoxWidth ? value : this.chart.viewBoxWidth - this.endChartWidth;\r\n\r\n\t\tthis.endChartValue = value;\r\n\r\n\t\tthis.changeMapViewSize();\r\n\r\n\t}\r\n\r\n\tchangeMapViewSize(){\r\n\t\tconst left = this.startChartValue + (this.chart.viewBoxWidth * 0.01);\r\n\t\tconst width = this.viewRangeWidth;\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'x', left);\r\n\t\tthis.layoutContorls.viewRange.setAttributeNS(null, 'width', width);\r\n\t}\r\n\r\n\r\n\tclearConsrolState(){\r\n\t\tthis.controlsState.startPosition    = this.startChartValue;\r\n\t\tthis.controlsState.endPosition      = this.endChartValue;\r\n\t\tthis.controlsState.minMapViewRange  = this.chart.viewBoxWidth * 0.15;\r\n\t\tthis.controlsState.startClicked     = false;\r\n\t\tthis.controlsState.endClicked       = false;\r\n\t\tthis.controlsState.chartReverceMove = false;\r\n\t\tthis.controlsState.chartMove        = false;\r\n\t\tthis.controlsState.mapRangeClicked  = false;\r\n\t}\r\n\r\n\tinitLayout(){\r\n\r\n\t\tconst layout = document.createElement('div');\r\n\r\n\t\tlayout.classList.add('chart_wrapper');\r\n\r\n\t\tlayout.innerHTML = this.chartTemplate;\r\n\r\n\t\tdocument.addEventListener('mousemove', (event) => {\r\n\r\n\t\t\tif (this.controlsState.startClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\t\tlet valueStart;\r\n\t\t\t\tif (this.controlsState.chartReverceMove){\r\n\t\t\t\t\tvalueStart = this.controlsState.startPosition + ((this.controlsState.clickInitialPosition - event.clientX) / this.layout.clientWidth) * this.viewRangeWidth;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvalueStart = this.controlsState.startPosition + (0 - (this.controlsState.clickInitialPosition - event.clientX) / this.layout.clientWidth) * this.chart.viewBoxWidth;\r\n\t\t\t\t}\r\n\t\t\t\tthis.changeStartPosition(valueStart);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (this.controlsState.endClicked || this.controlsState.mapRangeClicked){\r\n\r\n\t\t\t\tlet valueEnd;\r\n\t\t\t\tif (this.controlsState.chartReverceMove){\r\n\t\t\t\t\tvalueEnd = (this.controlsState.endPosition + ((this.controlsState.clickInitialPosition - event.clientX) / this.layout.clientWidth) * this.viewRangeWidth);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvalueEnd = (this.controlsState.endPosition + ( 0 - (this.controlsState.clickInitialPosition - event.clientX) / this.layout.clientWidth) * this.chart.viewBoxWidth);\r\n\t\t\t\t}\r\n\t\t\t\tthis.changeEndPosition(valueEnd);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif(this.controlsState.chartMove){\r\n\t\t\t\tconst startPercent = this.startChartValue;\r\n\t\t\t\tconst endPercent = this.endChartValue + this.endChartWidth;\r\n\t\t\t\tconst target = this.chartWindow;\r\n\r\n\t\t\t\ttarget.classList.add('dragging');\r\n\t\t\t\tthis.chart.drawLines({target, startPercent, endPercent, drawValues: true});\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\ttarget.classList.remove('dragging');\r\n\t\t\t\t}, 0);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener('mouseup', () => this.clearConsrolState());\r\n\r\n\t\tthis.appendTarget.append(layout);\r\n\r\n\t\treturn layout;\r\n\r\n\t}\r\n}\r\n\r\n\r\n// new Chart(chartData[0]);\r\n// new Chart(chartData[1]);\r\n// new Chart(chartData[2]);\r\n// new Chart(chartData[3]);\r\nnew Chart(chartData[4]);","// extracted by mini-css-extract-plugin"],"sourceRoot":""}